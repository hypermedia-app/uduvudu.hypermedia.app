/* 46 */

/***/

/* WEBPACK VAR INJECTION */

// Utils

// Could use `inherits` module, but don't want to move from single file

// architecture yet.

// BN

// Reduction context

// 'a' - 'f'

// 'a'

// 2 ^ 53 (unsafe)

// Reverse the bytes

// Perhaps a Uint8Array

// Create possibly bigger array to ensure that it fits the number

// Scan 24-bit chunks and add them to the number

// NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

// Initialize as zero

// Find length of limb in base

// Remove leading `0` from `this`

// -0 = 0

/*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

// Peel one iteration (compiler can't do it, because of code complexity)

// Sum all words with the same `i + j = k` and accumulate `ncarry`,

// note that ncarry could be >= 0x3ffffff

// TODO(indutny): it may be reasonable to omit it for users who don't need

// to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit

// multiplication (like elliptic secp256k1).

// var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));

// var groupBase = Math.pow(base, groupSize);

// NOTE: at this stage it is known that the top bit is set

// Assume big-endian

// Short-cut

// Return number of used bits in a BN

// Number of trailing zero bits

// Return negative clone of `this`

// Or `num` with `this` in-place

// Or `num` with `this`

// And `num` with `this` in-place

// b = min-length(num, this)

// And `num` with `this`

// Xor `num` with `this` in-place

// a.length > b.length

// Xor `num` with `this`

// Not ``this`` with ``width`` bitwidth

// Extend the buffer with leading zeroes

// Handle complete words

// Handle the residue

// And remove leading zeroes

// Set `bit` of `this`

// Add `num` to `this` in-place

// negative + positive

// positive + negative

// Add `num` to `this`

// Subtract `num` from `this` in-place

// this - (-num) = this + num

// -this - num = -(this + num)

// At this point both numbers are positive

// Optimization - zeroify

// a > b

// Copy rest of the words

// Subtract `num` from `this`

/* k = 0 */

/* k = 1 */

/* k = 2 */

/* k = 3 */

/* k = 4 */

/* k = 5 */

/* k = 6 */

/* k = 7 */

/* k = 8 */

/* k = 9 */

/* k = 10 */

/* k = 11 */

/* k = 12 */

/* k = 13 */

/* k = 14 */

/* k = 15 */

/* k = 16 */

/* k = 17 */

/* k = 18 */

// Polyfill comb

// Cooley-Tukey algorithm for FFT

// slightly revisited to rely on looping instead of recursion

// Returns binary-reversed representation of `x`

// Performs "tweedling" phase, therefore 'emulating'

// behaviour of the recursive algorithm

/* jshint maxdepth : false */

// Pad with zeroes

// Multiply `this` by `num`

// Multiply employing FFT

// In-place Multiplication

// Carry

// NOTE: lo is 27bit maximum

// `this` * `this`

// `this` * `this` in-place

// Math.pow(`this`, `num`)

// Skip leading zeroes

// Shift-left in-place

// TODO(indutny): implement me

// Shift-right in-place

// NOTE: `hint` is a lowest bit before trailing zeroes

// NOTE: if `extended` is present - it will be filled with destroyed bits

// Extended mode, copy masked part

// Push carried bits as a mask

// Shift-left

// Shift-right

// Test if n bit is set

// Fast case: bit is much higher than all existing words

// Check bit and return

// Return only lowers bits of number (in-place)

// Return only lowers bits of number

// Add plain number `num` to `this`

// Possible sign change

// Subtract plain number `num` from `this`

// Subtraction overflow

// Initialize quotient

// NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max

// (0x7ffffff)

// Denormalize

// NOTE: 1) `mode` can be set to `mod` to request mod only,

//       to `div` to request div only, or be absent to

//       request both div & mod

//       2) `positive` is true if unsigned mod is requested

// Both numbers are positive at this point

// Strip both numbers to approximate shift value

// Very short reduction

// Find `this` / `num`

// Find `this` % `num`

// Find Round(`this` / `num`)

// Fast case - exact division

// Round down

// Round up

// In-place division by number

// A * x + B * y = x

// This is reduced incarnation of the binary EEA

// above, designated to invert members of the

// _prime_ fields F(p) at a maximal speed

// Remove common factor of two

// Swap `a` and `b` to make `a` always bigger than `b`

// Invert number in the field F(num)

// And first word and num

// Increment at the bit position in-line

// Add bit and propagate, if needed

// Compare two numbers and return:

// 1 - if `this` > `num`

// 0 - if `this` == `num`

// -1 - if `this` < `num`

// Unsigned comparison

// At this point both numbers have the same sign

//

// A reduce context, could be using montgomery or something better, depending

// on the `m` itself.

// Square root over p

// Return negative clone of `this` % `red modulo`

// Prime numbers with efficient reduction

// Pseudo-Mersenne prime

// P = 2 ^ N - K

// 2 ^ 255 - 19

// Base reduction engine

// Assumes that `num` is less than `P^2`

// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)

// 256 = 9 * 26 + 22

// Shift by 9 limbs

// K = 0x1000003d1 = [ 0x40, 0x3d1 ]

// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

// Fast length reduction

// K = 0x13

// Exported mostly for testing purposes, use plain name instead

// Cached version of prime

// Fast case

// Tonelli-Shanks algorithm (Totally unoptimized and slow)

// Find Q and S, that Q * 2 ^ S = (P - 1)

// Montgomery method engine

/* 47 */

// Protocols

/* 48 */

/* 49 */

/* 50 */

// Inspired by stringToUtf8ByteArray() in closure-library by Google

// https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143

// Apache License 2.0

// https://github.com/google/closure-library/blob/master/LICENSE

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

// phantomjs needs to throw

// in case browserify  isn't using the Uint8Array version

// This will not work in older browsers.

// See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues

// getRandomValues fails on IE if size == 0

// XXX: phantomjs doesn't like a buffer being passed here

/* 57 */

// prototype class for hash functions

// zero (rem + 1) trailing bits, where (rem + 1) is the smallest

// non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

// uint32

// uint64

/* 58 */

/* 59 */

/* 60 */

/* 61 */

/* 62 */

// Enough data, try updating

// Convert message to array, pad it, and join into 32bit blocks

// Process pending data in blocks

// Append length

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

// based on the aes implimentation in triple sec

// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js

// https://code.google.com/p/crypto-js/

// AES constants

// Compute double table

// Compute sbox

// Compute multiplication

// Compute inv sub bytes, inv mix columns tables

// swap

/* 70 */

/* eslint-disable camelcase */

/* 71 */

/* 72 */

// falls through

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

// state

// create padding and handle blocks

// produce result

/* 78 */

// computation

// if (i<80) {

// update state

/* 79 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

// module.parent = undefined by default

/* 84 */

/* 85 */

/* 86 */

/* 87 */

// Proxy hash functions to the main object

/* 88 */

/* 89 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* 100 */

/* 101 */

// TODO: escape special chars

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

// consume data

// update length

// reset state

/* 107 */

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

// new Array(64)

/* 108 */

// t2 = sigma0 + maj

/* 109 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

// default in iojs

/* eslint no-self-compare: 0 */

/* 114 */

/* istanbul ignore next */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 120 */

/* 121 */

// this is what openssl does

/* 122 */

// Generage random bytes until a number less than n is found.

// This ensures that 0..n-1 have an equal probability of being selected.

// Generate a random number greater than or equal to start and less than stop.

// Find d and s, (n - 1) = (2 ^ s) * d;

/* 123 */

// Emulate crypto API using randy

// Modern browsers

// IE

// Old junk

// Node.js or Web worker with no crypto support

/* 124 */

/* 125 */

/* 126 */

/* 127 */

// 32 x 32bit words

// i - 2

/* 128 */

// Return skipped data

// Share reporter state

/* 129 */

// Helper

// Convert key to integer if it is stringified

/* 130 */

// Construct base tree

// Tree methods

// Utility methods

// Multi-octet tag - load

// Indefinite form

// Definite form

// Short form

// Long form

// Failure

// Indefinite length... find END tag

// Bigint, return as it is (assume big endian)

/* 131 */

// Count octets required to store length

// Count number of octets

// Bignum, assume big endian

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2014 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// constants

/**
     * Hashes all of the quads about a blank node.
     *
     * @param id the ID of the bnode to hash quads for.
     * @param bnodes the mapping of bnodes to quads.
     *
     * @return the new hash.
     */

// return cached hash

// serialize all of bnode's quads

// sort serialized quads

/**
     * Produces a hash for the paths of adjacent bnodes for a bnode,
     * incorporating all information about its subgraph of bnodes. This
     * method will recursively pick adjacent bnode permutations that produce the
     * lexicographically-least 'path' serializations.
     *
     * @param id the ID of the bnode to hash paths for.
     * @param bnodes the map of bnode quads.
     * @param namer the canonical bnode namer.
     * @param pathNamer the namer used to assign names to adjacent bnodes.
     * @param callback(err, result) called once the operation completes.
     */

// create SHA-1 digest

// group adjacent bnodes by hash, keep properties and references separate

// done, hash groups

// get adjacent bnode

// normal property

// reverse property

// get bnode name (try canonical, path, then hash)

// hash direction, property, and bnode name/hash

// add bnode to hash group

// hashes a group of adjacent bnodes

// done, return SHA-1 digest and path namer

// digest group hash

// choose a path and namer from the permutations

// build adjacent path

// use canonical name if available

// recurse if bnode isn't named in the path yet

// skip permutation if path is already >= chosen path

// does the next recursion

// done, do next permutation

// do recursion

// do next recursion

// stores the results of this permutation and runs the next

// do next permutation

// digest chosen path and update namer

// hash the next group

/**
     * A helper function that gets the blank node name from an RDF quad node
     * (subject or object). If the node is a blank node and its value
     * does not match the given blank node ID, it will be returned.
     *
     * @param node the RDF quad node.
     * @param id the ID of the blank node to look next to.
     *
     * @return the adjacent blank node name or null if none was found.
     */

/**
     * Clones an object, array, or string/number. If a typed JavaScript object
     * is given, such as a Date, it will be converted to a string.
     *
     * @param value the value to clone.
     *
     * @return the cloned value.
     */

/**
     * Converts an RDF triple and graph name to an N-Quad string (a single quad).
     *
     * @param triple the RDF triple to convert.
     * @param graphName the name of the graph containing the triple, null for
     *          the default graph.
     * @param bnode the bnode the quad is mapped to (optional, for use
     *          during normalization only).
     *
     * @return the N-Quad string.
     */

// object is IRI, bnode, or literal

// subject is an IRI

// bnode normalization mode

// predicate is an IRI

// FIXME: TBD what to do with bnode predicates during normalization

// normalization mode

// graph

/**
     * Creates a new UniqueNamer. A UniqueNamer issues unique names, keeping
     * track of any previously issued names.
     *
     * @param prefix the prefix to use ('<prefix><counter>').
     */

/**
     * Copies this UniqueNamer.
     *
     * @return a copy of this UniqueNamer.
     */

/**
     * Performs normalization on the given RDF dataset.
     *
     * @param dataset the RDF dataset to normalize.
     * @param options the normalization options.
     * @param callback(err, normalized) called once the operation completes.
     */

// create quads and map bnodes to their associated quads

// mapping complete, start canonical naming

// generates unique and duplicate hashes for bnodes

// TODO: instead of N calls to setImmediate, run

// atomic normalization parts for a specified

// slice of time (perhaps configurable) as this

// will better utilize CPU and improve performance

// as JS processing speed improves

// hash quads for each unnamed bnode

// done, name blank nodes

// names unique hash bnodes

// name unique bnodes in sorted hash order

// names duplicate hash bnodes

// enumerate duplicate hash groups in sorted order

// process each group

// done, create JSON-LD array

// creates the sorted array of RDF quads

/* Note: At this point all bnodes in the set of RDF quads have been
         assigned canonical names, which have been stored in the 'namer' object.
         Here each quad is updated by assigning each of its bnodes its new name
         via the 'namer' object. */

// update bnode names in each quad and serialize

// sort normalized output

// name each group member

// name bnodes in hash order

// name all bnodes in path namer in key-entry order

// Note: key-order is preserved in javascript

// skip already-named bnodes

// hash bnode paths

// hash unnamed bnode

// store hash as unique or a duplicate

// hash next unnamed bnode

/**
     * Gets the new name for the given old name, where if no old name is given
     * a new name will be generated.
     *
     * @param [oldName] the old name to get the new name for.
     *
     * @return the new name.
     */

// return existing old name

// get next name

// save mapping

/**
     * Returns true if the given oldName has already been assigned a new name.
     *
     * @param oldName the oldName to check.
     *
     * @return true if the oldName has been assigned a new name, false if not.
     */

/**
     * A Permutator iterates over all possible permutations of the given array
     * of elements.
     *
     * @param list the array of elements to iterate over.
     */

// original array

// indicates whether there are more permutations

// directional info for permutation algorithm

/**
     * Returns true if there is another permutation.
     *
     * @return true if there is another permutation, false if not.
     */

/**
     * Gets the next permutation. Call hasNext() to ensure there is another one
     * first.
     *
     * @return the next permutation.
     */

// copy current permutation

/* Calculate the next permutation using the Steinhaus-Johnson-Trotter
       permutation algorithm. */

// get largest mobile element k

// (mobile: element is greater than the one it is looking at)

// no more permutations

// swap k and the element it is looking at

// reverse the direction of all elements larger than k

// SHA-1 API

/**
     * Hashes the given array of quads and returns its hexadecimal SHA-1 message
     * digest.
     *
     * @param nquads the list of serialized quads to hash.
     *
     * @return the hexadecimal SHA-1 message digest.
     */

/* 178 */

// the least I can do is make error messages for the rest of the node.js/crypto api.

// ;[

//   'createCredentials'

// ].forEach(function (name) {

//   exports[name] = function () {

//     throw new Error([

//       'sorry, ' + name + ' is not implemented yet',

//       'we accept pull requests',

//       'https://github.com/crypto-browserify/crypto-browserify'

//     ].join('\n'))

//   }

// })

/* 179 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

/* 184 */

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 190 */

/* 191 */

/* 192 */

// 7, 15, 23, 31, 39, 47, 55, 63

// 6, 14, 22, 30, 39, 47, 55, 63

// 5, 13, 21, 29, 39, 47, 55, 63

// 4, 12, 20, 28

// 1, 9, 17, 25, 33, 41, 49, 57

// 2, 10, 18, 26, 34, 42, 50, 58

// 3, 11, 19, 27, 35, 43, 51, 59

// 36, 44, 52, 60

// inL => outL

// inR => outR

/* 193 */

// Might be overrided

// Append data to buffer

// Shift next

// Write blocks

// Queue rest

// TODO(indutny): optimize it, this is far from optimal

// Buffer rest of the input

/* 194 */

// Initial Permutation

// Apply f() x16 times

// f(r, k)

// Reverse Initial Permutation

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html

// by Juho Vähä-Herttua

// V_i+1 = V_i >> 1

// Z_i+1 = Z_i ^ V_i

// Store the value of LSB(V_i)

// If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

//not a prime so +1

// we'd be able to check the generator

// it would fail so +8

//not a safe prime

// unsuidable generator

// prime mod 10 needs to equal 3 or 7

/* 210 */

/* 211 */

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

// rsa keys can be interpreted as ecdsa ones in openssl

// Pad values

/* 212 */

/* 213 */

// Represent num in a w-NAF form

// Optimization, shift by word if possible

// Represent k1, k2 in a Joint Sparse Form

// First phase

// Second phase

/* 214 */

// Use Montgomery, when there is no fast reduction for the prime

// Useful for many curves

// Curve configuration, optional

// Temporary arrays

// Generalized Greg Maxwell's trick

// Translate into more windowed form

// Precompute window

// Get NAF form

// Count zeroes

// J +- P

// J +- J

// Comb small window NAFs

/* 1 */

/* 3 */

/* 5 */

/* 7 */

// Try to avoid Projective points, if possible

/* -1 -1 */

/* -1 0 */

/* -1 1 */

/* 0 -1 */

/* 0 0 */

/* 0 1 */

/* 1 -1 */

/* 1 0 */

/* 1 1 */

// Zeroify references

// uncompressed, hybrid-odd, hybrid-even

/* 215 */

// If the curve is endomorphic, precalculate beta and lambda

// Force redgomery representation when loading from JSON

// No efficient endomorphism

// Compute beta and lambda, that lambda * P = (beta * Px; Py)

// Choose the smallest beta

// Choose the lambda that is matching selected beta

// Get basis vectors, used for balanced length-two representation

// Find roots of for x^2 + x + 1 in F

// Root = (-1 +- Sqrt(-3)) / 2

// aprxSqrt >= sqrt(this.n)

// 3.74

// Run EGCD, until r(L + 1) < aprxSqrt

// Normalize signs

// XXX Is there any way to tell if the number is odd without converting it

// to non-red form?

// Clean-up references to points and coefficients

// O + P = P

// P + O = P

// P + P = 2P

// P + (-P) = O

// P + Q = O

// 2P = O

// 12M + 4S + 7A

// 8M + 3S + 7A

// 1M + 2S + 1A + N * (4S + 5M + 8A)

// N = 1 => 6M + 6S + 9A

// Z = 1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html

//     #doubling-mdbl-2007-bl

// 1M + 5S + 14A

// XX = X1^2

// YY = Y1^2

// M = 3 * XX + a; a = 0

// T = M ^ 2 - 2*S

// X3 = T

// Y3 = M * (S - T) - 8 * YYYY

// Z3 = 2*Y1

//     #doubling-dbl-2009-l

// 2M + 5S + 13A

// A = X1^2

// B = Y1^2

// E = 3 * A

// F = E^2

// X3 = F - 2 * D

// Y3 = E * (D - X3) - 8 * C

// Z3 = 2 * Y1 * Z1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html

// 1M + 5S + 15A

// M = 3 * XX + a

// T = M^2 - 2 * S

// Z3 = 2 * Y1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b

// 3M + 5S

// delta = Z1^2

// gamma = Y1^2

// X3 = alpha^2 - 8 * beta

// Z3 = (Y1 + Z1)^2 - gamma - delta

// Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

// 4M + 6S + 10A

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl

// 5M + 10S + ...

// U = (M + E)^2 - MM - EE - T

// X3 = 4 * (X1 * EE - 4 * YY * U)

// Y3 = 8 * Y1 * (U * (T - U) - E * EE)

// Z3 = (Z1 + E)^2 - ZZ - EE

// x1 * z2^2 == x2 * z1^2

// y1 * z2^3 == y2 * z1^3

// XXX This code assumes that zero is always zero in red

/* 216 */

// No-op

// http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3

// 2M + 2S + 4A

// A = X1 + Z1

// AA = A^2

// http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3

// 4M + 2S + 6A

// A = X2 + Z2

// B = X2 - Z2

// Q

// N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q

// N * Q = 2 * ((N / 2) * Q + Q))

// N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)

// N * Q + Q = 2 * ((N / 2) * Q + Q)

// Normalize coordinates

/* 217 */

// NOTE: Important as we are creating point in Base.call()

// Use extended coordinates

// Just for compatibility with Short curve

// x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

// Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

// hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html

//     #doubling-dbl-2008-hwcd

// 4M + 4S

// D = a * A

// E = (X1 + Y1)^2 - A - B

// hyperelliptic.org/EFD/g1p/auto-twisted-projective.html

//     #doubling-dbl-2008-bbjlp

//     #doubling-dbl-2007-bl

// and others

// Generally 3M + 4S or 2M + 4S

// B = (X1 + Y1)^2

// C = X1^2

// E = a * C

// F = E + D

// X3 = (B - C - D) * (F - 2)

// Y3 = F * (E - D)

// Z3 = F^2 - 2 * F

// H = Z1^2

// J = F - 2 * H

// X3 = (B-C-D)*J

// Z3 = F * J

// E = C + D

// H = (c * Z1)^2

// X3 = c * (B - E) * J

// Y3 = c * E * (C - D)

// Z3 = E * J

// Double in extended coordinates

//     #addition-add-2008-hwcd-3

// 8M

// A = (Y1 - X1) * (Y2 - X2)

// B = (Y1 + X1) * (Y2 + X2)

//     #addition-add-2008-bbjlp

//     #addition-add-2007-bl

// 10M + 1S

// A = Z1 * Z2

// B = A^2

// Y3 = A * G * (D - a * C)

// Z3 = F * G

// Y3 = A * G * (D - C)

// Z3 = c * F * G

// Compatibility with BaseCurve

/* 218 */

// -121665 * (121666^(-1)) (mod P)

// 4/5

// Precomputed endomorphism

/* 219 */

/* 220 */

/* 221 */

// Just truncate output

/* 222 */

/* 223 */

/* 224 */

// Shorten key, if needed

// Add padding to key

// 0x36 ^ 0x5c = 0x6a

/* 225 */

/* 226 */

// Shortcut `elliptic.ec(curve-name)`

// Shortcut for `elliptic.ec(elliptic.curves.curveName)`

// Point on curve

// Hash for function for DRBG

// Instantiate Hmac_DRBG

// Zero-extend key to provide enough entropy

// Use complement of `s`, if it is > `n / 2`

// Perform primitive values validation

// Validate signature

// NOTE: Greg Maxwell's trick, inspired by:

// https://git.io/vad3K

// 1.1. Let x = r + jn.

// 1.6.1 Compute Q = r^-1 (sR -  eG)

//               Q = r^-1 (sR + -eG)

/* 227 */

// Optional entropy enc

// Optional encoding

// Optional additional data

/* 228 */

// KeyPair(ec, { priv: ..., pub: ... })

// compact is optional argument

// Ensure that the priv won't be bigger than n, otherwise we may fail

// in fixed multiplication method

// Montgomery points only have an `x` coordinate.

// Weierstrass/Edwards points on the other hand have both `x` and

// `y` coordinates.

// ECDH

// ECDSA

/* 229 */

/* 230 */

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/

/* 231 */

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/

/* 232 */

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/

/* 233 */

// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js

// Fedor, you are amazing.

/* 234 */

// Lazily create decoder

// Lazily create encoder

/* internal */

/* 235 */

// win.eval() magically appears when this is called in IE:

// Avoid copying circular objects like `top` and `window` by only

// updating existing context properties or new properties in the `win`

// that was only introduced after the eval.

// maybe...

/* 236 */

/* 237 */

// IE only adds stack when thrown

/* 238 */

// State

// Should create new instance on each method

// Filter children

// Filter children and args

// Replace parent to maintain backward link

// Overrided methods

// Public methods

// Decoding

// Decode root node

// Check if tag is there

// Trial and Error

// Push object on stack

// Unwrap explicit values

// Unwrap implicit and normal values

// Select proper method for tag

// Decode children

// Decode contained/encoded by schema, only in bit or octet strings

// NOTE: We are ignoring errors here, to let parser continue with other

// parts of encoded data

// Pop object

// Set key

// Create altered use decoder if implicit is set

// Encoding

// Set reporter to share it with a child class

// Check if data is there

// Encode children first

// Anything that was given is translated to buffer

// TODO(indutny): this should be thrown on DSL level

// Encode data itself

// Wrap in explicit

/* 239 */

/* 240 */

/* 241 */

// Remove excessive symbols

/* 242 */

/* 243 */

/* 244 */

// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js

// thanks to @Rantanen

/* 245 */

/* 246 */

// adapted from https://github.com/apatil/pemstrip

/* 247 */

/* 248 */

// eslint-disable-line new-cap

/* 249 */

/* 250 */

/* 251 */

/* 252 */

// eslint-disable-line no-self-compare

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

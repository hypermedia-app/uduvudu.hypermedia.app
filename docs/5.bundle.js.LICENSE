/***/

// the whatwg-fetch polyfill installs the fetch() function

// on the global object (window or self)

//

// Return that as the export for use in Webpack, Browserify etc.

/* harmony export (binding) */

// Build a destructive iterator for the value list

// IE 10-11 can't handle a DataView body.

// HTTP methods whose capitalization should be normalized

// DONE (success or failure)

/* WEBPACK VAR INJECTION */

// Class returns internal [[Class]] property, used to avoid cross-frame instanceof issues:

// Paranoia

// Beyond this value, index getters/setters (i.e. array[0], array[1]) are so slow to

// create, and consume so much memory, that the browser appears frozen.

// ES5: lock down object properties

// emulate ES5 getter/setter API using legacy APIs

// http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx

// (second clause tests for Object.defineProperty() in IE<9 that only supports extending DOM prototypes, but

// note that IE<9 does not support __defineGetter__ or __defineSetter__ so it just renders the method harmless)

// ES5: Make obj[index] an alias for obj._getter(index)/obj._setter(index, value)

// for index in 0 ... obj.length

// Internal conversion functions:

//    pack<Type>()   - take a number (interpreted as Type), output a byte array

//    unpack<Type>() - take a byte array, output a Type-like number

// Compute sign, exponent, fraction

// NaN

// http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping

// Overflow

// Normalized

// Denormalized

// Pack sign, exponent, fraction

// Bits to bytes

// Bytes to bits

// Produce number

// Unpack sign, exponent, fraction

// 3 The ArrayBuffer Type

/** @constructor */

// 4 The ArrayBufferView Type

// NOTE: this constructor is not exported

//this.buffer = null;

//this.byteOffset = 0;

//this.byteLength = 0;

// 5 The Typed Array View Types

// Each TypedArray type requires a distinct constructor instance with

// identical logic, which this produces.

// Constructor(TypedArray array)

// Constructor(ArrayBuffer buffer,

//             optional unsigned long byteOffset, optional unsigned long length)

// The given byteOffset must be a multiple of the element

// size of the specific type, otherwise an exception is raised.

// Constructor(sequence<type> array)

// Constructor(unsigned long length)

// getter type (unsigned long index);

// NONSTANDARD: convenience alias for getter: type get(unsigned long index);

// setter void (unsigned long index, type value);

// void set(TypedArray array, optional unsigned long offset);

// void set(sequence<type> array, optional unsigned long offset);

// TypedArray subarray(long begin, optional long end);

// 6 The DataView View Type

//             optional unsigned long byteOffset,

//             optional unsigned long byteLength)

// Get bytes

// Flip if necessary

// Write them

// not implemented in Firefox 51

/* if (!res.body) {
    return res
  } */

// replace respsonse with a patchable implementation

// make sure there is only once accept header

// Copyright Joyent, Inc. and other Node contributors.

// Permission is hereby granted, free of charge, to any person obtaining a

// copy of this software and associated documentation files (the

// "Software"), to deal in the Software without restriction, including

// without limitation the rights to use, copy, modify, merge, publish,

// distribute, sublicense, and/or sell copies of the Software, and to permit

// persons to whom the Software is furnished to do so, subject to the

// following conditions:

// The above copyright notice and this permission notice shall be included

// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be

// compiled once on the first module load.

// format a parsed object into a url string

// ensure it's an object, and not a string url.

// If it's an obj, this is a no-op.

// this way, you can call url_format() on strings

// to clean up potentially wonky urls.

// Special case for a simple path URL

// RFC 2396: characters not allowed for various reasons.

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Characters that are never ever allowed in a hostname.

// Note that any invalid chars are also handled, but these

// are the ones that are *expected* to be seen, so we fast-path

// them.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// protocols that always contain a // bit.

// Copy chrome, IE, opera backslash-handling behavior.

// Back slashes before the query string get converted to forward slashes

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// trim before proceeding.

// This is to support parse stuff like "  http://foo.com  \n"

// Try fast path regexp

// figure out if it's got a host

// user@server is *always* interpreted as a hostname, and url

// resolution will treat //foo/bar as host=foo,path=bar because that's

// how the browser resolves relative URLs.

// there's a hostname.

// the first instance of /, ?, ;, or # ends the host.

// If there is an @ in the hostname, then non-host chars *are* allowed

// to the left of the last @ sign, unless some host-ending character

// comes *before* the @-sign.

// URLs are obnoxious.

// ex:

// http://a@b@c/ => user:a@b host:c

// http://a@b?@c => user:a host:c path:/?@c

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// Review our test case against browsers more comprehensively.

// find the first instance of any hostEndingChars

// at this point, either we have an explicit point where the

// auth portion cannot go past, or the last @ char is the decider.

// Now we have a portion which is definitely the auth.

// Pull that off.

// atSign can be anywhere.

// the host is the remaining to the left of the first non-host char

// if we still have not hit it, then the entire thing is a host.

// pull out port.

// we've indicated that there is a hostname,

// so even if it's empty, it has to be present.

// if hostname begins with [ and ends with ]

// assume that it's an IPv6 address.

// validate a little.

// we replace non-ASCII char with a temporary placeholder

// we need this to make sure size of hostname is not

// broken by replacing non-ASCII by nothing

// we test again with ASCII char only

// hostnames are always lower case.

// IDNA Support: Returns a punycoded representation of "domain".

// It only converts parts of the domain name that

// have non-ASCII characters, i.e. it doesn't matter if

// you call it with a domain that already is ASCII-only.

// strip [ and ] from the hostname

// the host field still retains them, though

// now rest is set to the post-host stuff.

// chop off any delim chars.

// First, make 100% sure that any "autoEscape" chars get

// escaped, even if encodeURIComponent doesn't think they

// need to be.

// chop off from the tail first.

// got a fragment string.

//to support http.request

// no query string, but parseQueryString still requested

// finally, reconstruct the href based on what has been validated.

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// unless they had them to begin with.

// hash is always overridden, no matter what.

// even href="" will remove it.

// if the relative url is empty, then there's nothing left to do here.

// hrefs like //foo/bar always cut to the protocol.

// take everything except the protocol from relative

//urlParse appends trailing / to urls like http://www.example.com

// if it's a known url protocol, then changing

// the protocol does weird things

// first, if it's not file:, then we MUST have a host,

// and if there was a path

// to begin with, then we MUST have a path.

// if it is file:, then the host is dropped,

// because that's known to be hostless.

// anything else is assumed to be absolute.

// to support http.request

// if the url is a non-slashed url, then relative

// links like ../.. should be able

// to crawl up to the hostname, as well.  This is strange.

// result.protocol has already been set by now.

// Later on, put the first path part into the host field.

// it's absolute.

// it's relative

// throw away the existing file, and take the new path instead.

// just pull out the search.

// like href='?foo'.

// Put this after the other two cases because it simplifies the booleans

// no path at all.  easy.

// we've already handled the other stuff above.

// if a url ENDs in . or .., then it must get a trailing slash.

// however, if it ends in anything else non-slashy,

// then it must NOT get a trailing slash.

// if the path is allowed to go above the root, restore leading ..s

// put the host back

//to support request.http

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Detect free variables */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/** Highest positive signed 32-bit float value */

// aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

// 0x80

// '\x2D'

/** Regular expressions */

// unprintable ASCII chars + non-ASCII chars

// RFC 3490 separators

/** Error messages */

/** Convenience shortcuts */

/*--------------------------------------------------------------------------*/

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

// In email addresses, only the domain name should be punycoded. Leave

// the local part (i.e. everything up to `@`) intact.

// Avoid `split(regex)` for IE8 compatibility. See #17.

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

//  0..25 map to ASCII a..z or A..Z

// 26..35 map to ASCII 0..9

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

// Don't use UCS-2

/** Cached calculation results */

// Handle the basic code points: let `basic` be the number of input code

// points before the last delimiter, or `0` if there is none, then copy

// the first basic code points to the output.

// if it's not a basic code point

// Main decoding loop: start just after the last delimiter if any basic code

// points were copied; start at the beginning otherwise.

// `index` is the index of the next character to be consumed.

// Decode a generalized variable-length integer into `delta`,

// which gets added to `i`. The overflow checking is easier

// if we increase `i` as we go, then subtract off its starting

// value at the end to obtain `delta`.

// `i` was supposed to wrap around from `out` to `0`,

// incrementing `n` each time, so we'll fix that now:

// Insert `n` at position `i` of the output

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/** `inputLength` will hold the number of code points in `input`. */

// Convert the input in UCS-2 to Unicode

// Handle the basic code points

// Cache the length

// Initialize the state

// Main encoding loop:

// `handledCPCount` is the number of code points that have been handled;

// `basicLength` is the number of basic code points.

// Finish the basic string - if it is not empty - with a delimiter

// All non-basic code points < n have been handled already. Find the next

// larger one:

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// but guard against overflow

// Represent delta as a generalized variable-length integer

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/** Define the public API */

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

// If obj.hasOwnProperty has been overridden, then calling

// obj.hasOwnProperty(prop) will break.

// See: https://github.com/joyent/node/issues/1707

// maxKeys <= 0 means that we should not limit keys count

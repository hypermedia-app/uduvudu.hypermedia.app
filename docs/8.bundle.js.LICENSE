/***/

/* unused harmony export IronValidatableBehaviorMeta */

/* harmony export (binding) */

/* harmony import */

/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/

/**
 * Singleton IronMeta instance.
 */

/**
 * `Use IronValidatableBehavior` to implement an element that validates
 * user input. Use the related `IronValidatorBehavior` to add custom
 * validation logic to an iron-input.
 *
 * By default, an `<iron-form>` element validates its fields when the user
 * presses the submit button. To validate a form imperatively, call the form's
 * `validate()` method, which in turn will call `validate()` on all its
 * children. By using `IronValidatableBehavior`, your custom element
 * will get a public `validate()`, which will return the validity of the
 * element, and a corresponding `invalid` attribute, which can be used for
 * styling.
 *
 * To implement the custom validation logic of your element, you must override
 * the protected `_getValidity()` method of this behaviour, rather than
 * `validate()`. See
 * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)
 * for an example.
 *
 * ### Accessibility
 *
 * Changing the `invalid` property, either manually or by calling `validate()`
 * will update the `aria-invalid` attribute.
 *
 * @demo demo/index.html
 * @polymerBehavior
 */

/**
     * Name of the validator to use.
     */

/**
     * True if the last call to `validate` is invalid.
     */

/* Recompute this every time it's needed, because we don't know if the
   * underlying IronValidatableBehaviorMeta has changed. */

/**
   * @return {boolean} True if the validator `validator` exists.
   */

/**
   * Returns true if the `value` is valid, and updates `invalid`. If you want
   * your element to have custom validation logic, do not override this method;
   * override `_getValidity(value)` instead.

   * @param {Object} value Deprecated: The value to be validated. By default,
   * it is passed to the validator's `validate()` function, if a validator is
   set.
   * If this argument is not specified, then the element's `value` property
   * is used, if it exists.
   * @return {boolean} True if `value` is valid.
   */

// If this is an element that also has a value property, and there was

// no explicit value argument passed, use the element's property instead.

/**
   * Returns true if `value` is valid.  By default, it is passed
   * to the validator's `validate()` function, if a validator is set. You
   * should override this method if you want to implement custom validity
   * logic for your element.
   *
   * @param {Object} value The value to be validated.
   * @return {boolean} True if `value` is valid.
   */

/**
  IronFormElementBehavior adds a `name`, `value` and `required` properties to
  a custom element. It mostly exists for backcompatibility with Polymer 1.x, and
  is probably not something you want to use.

  @demo demo/index.html
  @polymerBehavior
 */

/**
     * The name of this element.
     */

/**
     * The value for this element.
     * @type {*}
     */

/**
     * Set to true to mark the input as required. If used in a form, a
     * custom element that uses this behavior should also use
     * IronValidatableBehavior and define a custom validation method.
     * Otherwise, a `required` element will always be considered valid.
     * It's also strongly recommended to provide a visual style for the element
     * when its value is invalid.
     */

// Empty implementations for backcompatibility.

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/polymer-legacy.js + 7 modules

// EXTERNAL MODULE: ./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js

// CONCATENATED MODULE: ./node_modules/@polymer/iron-input/iron-input.js

/**
`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way
binding and prevention of invalid input. To use it, you must distribute a native
`<input>` yourself. You can continue to use the native `input` as you would
normally:

    <iron-input>
      <input>
    </iron-input>

    <iron-input>
      <input type="email" disabled>
    </iron-input>

### Two-way binding

By default you can only get notified of changes to a native `<input>`'s `value`
due to user input:

    <input value="{{myValue::input}}">

This means that if you imperatively set the value (i.e. `someNativeInput.value =
'foo'`), no events will be fired and this change cannot be observed.

`iron-input` adds the `bind-value` property that mirrors the native `input`'s
'`value` property; this property can be used for two-way data binding.
`bind-value` will notify if it is changed either by user input or by script.

    <iron-input bind-value="{{myValue}}">
      <input>
    </iron-input>

Note: this means that if you want to imperatively set the native `input`'s, you
_must_ set `bind-value` instead, so that the wrapper `iron-input` can be
notified.

### Validation

`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`
has a `validate()` method (which internally just checks the distributed
`input`'s validity), which sets an `invalid` attribute that can also be used for
styling.

To validate automatically as you type, you can use the `auto-validate`
attribute.

`iron-input` also fires an `iron-input-validate` event after `validate()` is
called. You can use it to implement a custom validator:

    var CatsOnlyValidator = {
      validate: function(ironInput) {
        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';
        ironInput.invalid = !valid;
        return valid;
      }
    }
    ironInput.addEventListener('iron-input-validate', function() {
      CatsOnly.validate(input2);
    });

You can also use an element implementing an
[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).
This example can also be found in the demo for this element:

    <iron-input validator="cats-only">
      <input>
    </iron-input>

### Preventing invalid input

It may be desirable to only allow users to enter certain characters. You can use
the `allowed-pattern` attribute to accomplish this. This feature is separate
from validation, and `allowed-pattern` does not affect how the input is
validated.

    // Only allow typing digits, but a valid input has exactly 5 digits.
    <iron-input allowed-pattern="[0-9]">
      <input pattern="\d{5}">
    </iron-input>

@demo demo/index.html
*/

/**
   * Fired whenever `validate()` is called.
   *
   * @event iron-input-validate
   */

/**
     * Use this property instead of `value` for two-way data binding, or to
     * set a default value for the input. **Do not** use the distributed
     * input's `value` property to set a default value.
     */

/**
     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0
     * backcompatibility, if you were one-way binding to the Polymer 1.0
     * `input is="iron-input"` value attribute).
     */

/**
     * Regex-like list of characters allowed as input; all characters not in the
     * list will be rejected. The recommended format should be a list of allowed
     * characters, for example, `[a-zA-Z0-9.+-!;:]`.
     *
     * This pattern represents the allowed characters for the field; as the user
     * inputs text, each individual character will be checked against the
     * pattern (rather than checking the entire value as a whole). If a
     * character is not a match, it will be rejected.
     *
     * Pasted input will have each character checked individually; if any
     * character doesn't match `allowedPattern`, the entire pasted string will
     * be rejected.
     *
     * Note: if you were using `iron-input` in 1.0, you were also required to
     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,
     * and will be set automatically for you if an `allowedPattern` is provided.
     *
     */

/**
     * Set to true to auto-validate the input value as you type.
     */

/**
     * The native input element.
     */

// If the input is added at a later time, update the internal reference.

/**
   * Returns the distributed input element.
   */

/**
   * @suppress {checkTypes}
   */

// The observer could have run before attached() when we have actually

// initialized this property.

// manually notify because we don't want to notify until after setting value

// Need to validate each of the characters pasted if they haven't

// been validated inside `_onKeypress` already.

// What a control/printable character is varies wildly based on the browser.

// - most control characters (arrows, backspace) do not send a `keypress`

// event

//   in Chrome, but the *do* on Firefox

// - in Firefox, when they do send a `keypress` event, control chars have

//   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)

// - printable characters always send a keypress event.

// - in Firefox, printable chars always have a keyCode = 0. In Chrome, the

// keyCode

//   always matches the charCode.

// None of this makes any sense.

// For these keys, ASCII code == browser keycode.

// backspace

// tab

// enter

// pause

// caps lock

// insert

// delete

// num lock

// scroll lock

// page up/down, end, home, arrows

// escape

// For these keys, make sure it's a browser keycode and not an ASCII code.

// fn keys

// Handle special keys and backspace

// Check the pattern either here or in `_onInput`, but not in both.

/**
   * Returns true if `value` is valid. The validator provided in `validator`
   * will be used first, then any constraints.
   * @return {boolean} True if the value is valid.
   */

// Use the nested input's native validity.

// Only do extra checking if the browser thought this was valid.

// Empty, required input is invalid

// EXTERNAL MODULE: ./node_modules/@polymer/paper-styles/typography.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input-addon-behavior.js

/**
 * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for
 * `<paper-input-container>`. A add-on appears below the input, and may display
 * information based on the input value and validity such as a character counter
 * or an error message.
 * @polymerBehavior
 */

/**
   * The function called by `<paper-input-container>` when the input value or
   * validity changes.
   * @param {{
   *   invalid: boolean,
   *   inputElement: (Element|undefined),
   *   value: (string|undefined)
   * }} state -
   *     inputElement: The input element.
   *     value: The input value.
   *     invalid: True if the input value is invalid.
   */

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input-char-counter.js

/*
`<paper-input-char-counter>` is a character counter for use with
`<paper-input-container>`. It shows the number of characters entered in the
input and the max length if it is specified.

    <paper-input-container>
      <input maxlength="20">
      <paper-input-char-counter></paper-input-char-counter>
    </paper-input-container>

### Styling

The following mixin is available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-input-char-counter` | Mixin applied to the element | `{}`
*/

/**
   * This overrides the update function in PaperInputAddonBehavior.
   * @param {{
   *   inputElement: (Element|undefined),
   *   value: (string|undefined),
   *   invalid: boolean
   * }} state -
   *     inputElement: The input element.
   *     value: The input value.
   *     invalid: True if the input value is invalid.
   */

// EXTERNAL MODULE: ./node_modules/@polymer/iron-flex-layout/iron-flex-layout.js

// EXTERNAL MODULE: ./node_modules/@polymer/paper-styles/default-theme.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input-container.js

/*
`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or
`<textarea>` and optional add-on elements such as an error message or character
counter, used to implement Material Design text fields.

For example:

    <paper-input-container>
      <label slot="label">Your name</label>
      <iron-input slot="input">
        <input>
      </iron-input>
      // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
instead of the above.
    </paper-input-container>

You can style the nested `<input>` however you want; if you want it to look like
a Material Design input, you can style it with the
--paper-input-container-shared-input-style mixin.

Do not wrap `<paper-input-container>` around elements that already include it,
such as `<paper-input>`. Doing so may cause events to bounce infinitely between
the container and its contained element.

### Listening for input changes

By default, it listens for changes on the `bind-value` attribute on its children
nodes and perform tasks such as auto-validating and label styling when the
`bind-value` changes. You can configure the attribute it listens to with the
`attr-for-value` attribute.

### Using a custom input element

You can use a custom input element in a `<paper-input-container>`, for example
to implement a compound input field like a social security number input. The
custom input element should have the `paper-input-input` class, have a
`notify:true` value property and optionally implements
`Polymer.IronValidatableBehavior` if it is validatable.

    <paper-input-container attr-for-value="ssn-value">
      <label slot="label">Social security number</label>
      <ssn-input slot="input" class="paper-input-input"></ssn-input>
    </paper-input-container>


If you're using a `<paper-input-container>` imperatively, it's important to make
sure that you attach its children (the `iron-input` and the optional `label`)
before you attach the `<paper-input-container>` itself, so that it can be set up
correctly.

### Validation

If the `auto-validate` attribute is set, the input container will validate the
input and update the container styling when the input value changes.

### Add-ons

Add-ons are child elements of a `<paper-input-container>` with the `add-on`
attribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They
are notified when the input value or validity changes, and may implement
functionality such as error messages or character counters. They appear at the
bottom of the input.

### Prefixes and suffixes
These are child elements of a `<paper-input-container>` with the `prefix`
or `suffix` attribute, and are displayed inline with the input, before or after.

    <paper-input-container>
      <div slot="prefix">$</div>
      <label slot="label">Total</label>
      <iron-input slot="input">
        <input>
      </iron-input>
      // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
instead of the above. <paper-icon-button slot="suffix"
icon="clear"></paper-icon-button>
    </paper-input-container>

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`
`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`
`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`
`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`
`--paper-input-container` | Mixin applied to the container | `{}`
`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`
`--paper-input-container-label` | Mixin applied to the label | `{}`
`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`
`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`
`--paper-input-container-input` | Mixin applied to the input | `{}`
`--paper-input-container-input-align` | The vertical-align property of the input | `bottom`
`--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`
`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`
`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`
`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`
`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`
`--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`
`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`
`--paper-input-container-underline` | Mixin applied to the underline | `{}`
`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`
`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`
`--paper-input-prefix` | Mixin applied to the input prefix | `{}`
`--paper-input-suffix` | Mixin applied to the input suffix | `{}`

This element is `display:block` by default, but you can set the `inline`
attribute to make it `display:inline-block`.
*/

/**
     * Set to true to disable the floating label. The label disappears when the
     * input value is not null.
     */

/**
     * Set to true to always float the floating label.
     */

/**
     * The attribute to listen for value changes on.
     */

/**
     * Set to true to auto-validate the input value when it changes.
     */

/**
     * True if the input is invalid. This property is set automatically when the
     * input value changes if auto-validating, or when the `iron-input-validate`
     * event is heard from a child.
     */

/**
     * True if the input has focus.
     */

// Paper-input treats a value of undefined differently at startup than

// the rest of the time (specifically: it does not validate it at startup,

// but it does after that. We need to track whether the first time we

// encounter the value is basically this first time, so that we can validate

// it correctly the rest of the time. See

// https://github.com/PolymerElements/paper-input/issues/605

// Only validate when attached if the input already has a value.

/** @private */

// but it does after that. If this is in fact the bootup case, ignore

// validation, just this once.

// type="number" hack needed because this.value is empty until it's valid

// Call this last to notify the add-ons.

/**
   * Call this to update the state of add-ons.
   * @param {Object} state Add-on state.
   */

// If the label is floating, ignore any offsets that may have been

// applied from a prefix element.

// When the label is not floating, it should overlap the input element.

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input-error.js

/*
`<paper-input-error>` is an error message for use with
`<paper-input-container>`. The error is displayed when the
`<paper-input-container>` is `invalid`.

    <paper-input-container>
      <input pattern="[0-9]*">
      <paper-input-error slot="add-on">Only numbers are
allowed!</paper-input-error>
    </paper-input-container>

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`
`--paper-input-error` | Mixin applied to the error | `{}`
*/

/**
     * True if the error is showing.
     */

// EXTERNAL MODULE: ./node_modules/@polymer/iron-form-element-behavior/iron-form-element-behavior.js

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/elements/dom-module.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input-behavior.js

// Generate unique, monotonically increasing IDs for labels (needed by

// aria-labelledby) and add-ons.

/**
     * Fired when the input changes due to user interaction.
     *
     * @event change
     */

/**
     * The label for this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * `<label>`'s content and `hidden` property, e.g.
     * `<label hidden$="[[!label]]">[[label]]</label>` in your `template`
     */

/**
     * The value for this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<iron-input>`'s `bindValue`
     * property, or the value property of your input that is `notify:true`.
     * @type {*}
     */

/**
     * Set to true to disable this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * both the `<paper-input-container>`'s and the input's `disabled` property.
     */

/**
     * Returns true if the value is invalid. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to both the
     * `<paper-input-container>`'s and the input's `invalid` property.
     *
     * If `autoValidate` is true, the `invalid` attribute is managed
     * automatically, which can clobber attempts to manage it manually.
     */

/**
     * Set this to specify the pattern allowed by `preventInvalidInput`. If
     * you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `allowedPattern`
     * property.
     */

/**
     * The type of the input. The supported types are the
     * [native input's
     * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the (Polymer 1) `<input is="iron-input">`'s or
     * (Polymer 2)
     * `<iron-input>`'s `type` property.
     */

/**
     * The datalist of the input (if any). This should match the id of an
     * existing `<datalist>`. If you're using PaperInputBehavior to implement
     * your own paper-input-like element, bind this to the `<input
     * is="iron-input">`'s `list` property.
     */

/**
     * A pattern to validate the `input` with. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `pattern` property.
     */

/**
     * Set to true to mark the input as required. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `required` property.
     */

/**
     * The error message to display when the input is invalid. If you're using
     * PaperInputBehavior to implement your own paper-input-like element,
     * bind this to the `<paper-input-error>`'s content, if using.
     */

/**
     * Set to true to show a character counter.
     */

/**
     * Set to true to disable the floating label. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<paper-input-container>`'s `noLabelFloat` property.
     */

/**
     * Set to true to always float the label. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to the
     * `<paper-input-container>`'s `alwaysFloatLabel` property.
     */

/**
     * Set to true to auto-validate the input value. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<paper-input-container>`'s `autoValidate` property.
     */

/**
     * Name of the validator to use. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<input is="iron-input">`'s `validator` property.
     */

// HTMLInputElement attributes for binding if needed

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocomplete`
     * property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autofocus`
     * property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `inputmode`
     * property.
     */

/**
     * The minimum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `minlength`
     * property.
     */

/**
     * The maximum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `maxlength`
     * property.
     */

/**
     * The minimum (numeric or date-time) input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `min` property.
     */

/**
     * The maximum (numeric or date-time) input value.
     * Can be a String (e.g. `"2000-01-01"`) or a Number (e.g. `2`).
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `max` property.
     */

/**
     * Limits the numeric or date-time increments.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `step` property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `name` property.
     */

/**
     * A placeholder string in addition to the label. If this is set, the label
     * will always float.
     */

// need to set a default so _computeAlwaysFloatLabel is run

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `readonly`
     * property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `size` property.
     */

// Nonstandard attributes for binding if needed

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocapitalize`
     * property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocorrect`
     * property.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autosave`
     * property, used with type=search.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `results` property,
     * used with type=search.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `accept` property,
     * used with type=file.
     */

/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the`<input is="iron-input">`'s `multiple` property,
     * used with type=file.
     */

/**
   * @type {!Object}
   */

/**
   * Returns a reference to the input element.
   * @return {!HTMLElement}
   */

// Chrome generates audit errors if an <input type="password"> has a

// duplicate ID, which is almost always true in Shady DOM. Generate

// a unique ID instead.

/**
   * Returns a reference to the focusable element.
   * @return {!HTMLElement}
   */

// These types have some default placeholder text; overlapping

// the label on top of it looks terrible. Auto-float the label in this case.

// In the 2.0 version of the element, this is handled in `onIronInputReady`,

// i.e. after the native input has finished distributing. In the 1.0

// version, the input is in the shadow tree, so it's already available.

/**
   * Validates the input element and sets an error style if needed.
   *
   * @return {boolean}
   */

/**
   * Forward focus to inputElement. Overriden from IronControlState.
   */

// Forward the focus to the nested input.

/**
   * Handler that is called when a shift+tab keypress is detected by the menu.
   *
   * @param {CustomEvent} event A key combination event.
   */

/**
   * If `autoValidate` is true, then validates the element.
   */

/**
   * Restores the cursor to its original position after updating the value.
   * @param {string} newValue The value that should be saved.
   */

// Not all elements might have selection, and even if they have the

// right properties, accessing them might throw an exception (like for

// <input type=number>)

// The cursor automatically jumps to the end after re-setting the value,

// so restore it to its original position.

// Just set the value and give up on the caret.

// In the Shadow DOM, the `change` event is not leaked into the

// ancestor tree, so we must do this manually.

// See

// https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.

// Firefox doesn't respect the autofocus attribute if it's applied after

// the page is loaded (Chrome/WebKit do respect it), preventing an

// autofocus attribute specified in markup from taking effect when the

// element is upgraded. As a workaround, if the autofocus property is set,

// and the focus hasn't already been moved elsewhere, we take focus.

// In IE 11, the default document.activeElement can be the page's

// outermost html element, but there are also cases (under the

// polyfill?) in which the activeElement is not a real HTMLElement, but

// just a plain object. We identify the latter case as having no valid

// activeElement.

/* IE 11 */

// No specific element has taken the focus yet, so we can take it.

// CONCATENATED MODULE: ./node_modules/@polymer/paper-input/paper-input.js

/**
Material design: [Text
fields](https://www.google.com/design/spec/components/text-fields.html)

`<paper-input>` is a single-line text field with Material Design styling.

    <paper-input label="Input label"></paper-input>

It may include an optional error message or character counter.

    <paper-input error-message="Invalid input!" label="Input
label"></paper-input> <paper-input char-counter label="Input
label"></paper-input>

It can also include custom prefix or suffix elements, which are displayed
before or after the text input itself. In order for an element to be
considered as a prefix, it must have the `prefix` attribute (and similarly
for `suffix`).

    <paper-input label="total">
      <div prefix>$</div>
      <paper-icon-button slot="suffix" icon="clear"></paper-icon-button>
    </paper-input>

A `paper-input` can use the native `type=search` or `type=file` features.
However, since we can't control the native styling of the input (search icon,
file button, date placeholder, etc.), in these cases the label will be
automatically floated. The `placeholder` attribute can still be used for
additional informational text.

    <paper-input label="search!" type="search"
        placeholder="search for cats" autosave="test" results="5">
    </paper-input>

See `Polymer.PaperInputBehavior` for more API docs.

### Focus

To focus a paper-input, you can call the native `focus()` method as long as the
paper input has a tab index. Similarly, `blur()` will blur the element.

### Styling

See `Polymer.PaperInputContainer` for a list of custom properties used to
style this element.

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}

@group Paper Elements
@element paper-input
@hero hero.svg
@demo demo/index.html
*/

// Required for the correct TypeScript type-generation

/**
   * Returns a reference to the focusable element. Overridden from
   * PaperInputBehavior to correctly focus the native input.
   *
   * @return {!HTMLElement}
   */

// Note: This event is only available in the 1.0 version of this element.

// In 2.0, the functionality of `_onIronInputReady` is done in

// PaperInputBehavior::attached.

// Even though this is only used in the next line, save this for

// backwards compatibility, since the native input had this ID until 2.0.5.

// EXTERNAL MODULE: ./node_modules/@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js

// CONCATENATED MODULE: ./node_modules/@polymer/neon-animation/neon-animatable-behavior.js

/**
 * `NeonAnimatableBehavior` is implemented by elements containing
 * animations for use with elements implementing
 * `NeonAnimationRunnerBehavior`.
 * @polymerBehavior
 */

/**
     * Animation configuration. See README for more info.
     */

/**
     * Convenience property for setting an 'entry' animation. Do not set
     * `animationConfig.entry` manually if using this. The animated node is set
     * to `this` if using this property.
     */

/**
     * Convenience property for setting an 'exit' animation. Do not set
     * `animationConfig.exit` manually if using this. The animated node is set
     * to `this` if using this property.
     */

// shallowly copy properties from config2 to config1

// type is optional

// iterate animations and recurse to process configurations from child nodes

// merge configurations with the same id, making a clone lazily

// put any configs with an id into a map

/**
   * An element implementing `NeonAnimationRunnerBehavior` calls this
   * method to configure an animation with an optional type. Elements
   * implementing `NeonAnimatableBehavior` should define the property
   * `animationConfig`, which is either a configuration object or a map of
   * animation type to array of configuration objects.
   */

// append the configurations saved in the map to the array

// is this element actually a neon animation?

// Closure compiler does not work well with a try / catch here.

// .configure needs to be explicitly defined

/**
             * @param {Object} config
             * @return {AnimationEffectReadOnly}
             */

// configuration or play could fail if polyfills aren't loaded

// Check if we have an Effect rather than an Animation

/**
   * Plays an animation with an optional `type`.
   * @param {string=} type
   * @param {!Object=} cookie
   */

/**
   * Cancels the currently running animations.
   */

// CONCATENATED MODULE: ./node_modules/@polymer/neon-animation/neon-animation-runner-behavior.js

/**
 * `NeonAnimationRunnerBehavior` adds a method to run animations.
 *
 * @polymerBehavior NeonAnimationRunnerBehavior
 */

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js + 1 modules

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/legacy/polymer.dom.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@polymer/iron-dropdown/iron-dropdown.js

/**
`<iron-dropdown>` is a generalized element that is useful when you have
hidden content (`dropdown-content`) that is revealed due to some change in
state that should cause it to do so.

Note that this is a low-level element intended to be used as part of other
composite elements that cause dropdowns to be revealed.

Examples of elements that might be implemented using an `iron-dropdown`
include comboboxes, menubuttons, selects. The list goes on.

The `<iron-dropdown>` element exposes attributes that allow the position
of the `dropdown-content` relative to the `dropdown-trigger` to be
configured.

    <iron-dropdown horizontal-align="right" vertical-align="top">
      <div slot="dropdown-content">Hello!</div>
    </iron-dropdown>

In the above example, the `<div>` assigned to the `dropdown-content` slot will
be hidden until the dropdown element has `opened` set to true, or when the
`open` method is called on the element.

@demo demo/index.html
*/

/**
     * The orientation against which to align the dropdown content
     * horizontally relative to the dropdown trigger.
     * Overridden from `Polymer.IronFitBehavior`.
     */

/**
     * The orientation against which to align the dropdown content
     * vertically relative to the dropdown trigger.
     * Overridden from `Polymer.IronFitBehavior`.
     */

/**
     * An animation config. If provided, this will be used to animate the
     * opening of the dropdown. Pass an Array for multiple animations.
     * See `neon-animation` documentation for more animation configuration
     * details.
     */

/**
     * An animation config. If provided, this will be used to animate the
     * closing of the dropdown. Pass an Array for multiple animations.
     * See `neon-animation` documentation for more animation configuration
     * details.
     */

/**
     * If provided, this will be the element that will be focused when
     * the dropdown opens.
     */

/**
     * Set to true to disable animations when opening and closing the
     * dropdown.
     */

/**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     * This property is a shortcut to set `scrollAction` to lock or refit.
     * Prefer directly setting the `scrollAction` property.
     */

/**
   * The element that is contained by the dropdown, if any.
   */

// Polymer 2.x returns slot.assignedNodes which can contain text nodes.

// Ensure scrollAction is set.

/**
   * Called when the value of `opened` changes.
   * Overridden from `IronOverlayBehavior`
   */

/**
   * Overridden from `IronOverlayBehavior`.
   */

/**
   * Called when animation finishes on the dropdown (when opening or
   * closing). Responsible for "completing" the process of opening or
   * closing the dropdown by positioning it or setting its display to
   * none.
   */

/**
   * Constructs the final animation config from different properties used
   * to configure specific parts of the opening and closing animations.
   */

// Update the animation node to be the containedElement.

/**
   * Updates the overlay position based on configured horizontal
   * and vertical alignment.
   */

// This triggers iron-resize, and iron-overlay-behavior will call refit if

// needed.

/**
   * Sets scrollAction according to the value of allowOutsideScroll.
   * Prefer setting directly scrollAction.
   */

// Wait until initial values are all set.

/**
   * Apply focus to focusTarget or containedElement
   */

// CONCATENATED MODULE: ./node_modules/@polymer/neon-animation/neon-animation-behavior.js

/**
 * Use `NeonAnimationBehavior` to implement an animation.
 * @polymerBehavior
 */

/**
     * Defines the animation timing.
     */

/**
   * Can be used to determine that elements implement this behavior.
   */

/**
   * Do any animation configuration here.
   */

// configure: function(config) {

// },

/**
   * Returns the animation timing by mixing in properties from `config` to the
   * defaults defined by the animation.
   */

/**
   * Sets `transform` and `transformOrigin` properties along with the prefixed
   * versions.
   */

/**
   * Called when the animation finishes.
   */

// CONCATENATED MODULE: ./node_modules/@polymer/neon-animation/animations/fade-in-animation.js

/*
`<fade-in-animation>` animates the opacity of an element from 0 to 1.

Configuration:
```
{
  name: 'fade-in-animation',
  node: <node>
  timing: <animation-timing>
}
```
*/

// CONCATENATED MODULE: ./node_modules/@polymer/neon-animation/animations/fade-out-animation.js

/*
`<fade-out-animation>` animates the opacity of an element from 1 to 0.

Configuration:
```
{
  name: 'fade-out-animation',
  node: <node>
  timing: <animation-timing>
}
```
*/

// EXTERNAL MODULE: ./node_modules/@polymer/paper-styles/shadow.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-menu-button/paper-menu-button-animations.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-menu-button/paper-menu-button.js

/**
Material design: [Dropdown
buttons](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)

`paper-menu-button` allows one to compose a designated "trigger" element with
another element that represents "content", to create a dropdown menu that
displays the "content" when the "trigger" is clicked.

The child element assigned to the `dropdown-trigger` slot will be used as the
"trigger" element. The child element assigned to the `dropdown-content` slot
will be used as the "content" element.

The `paper-menu-button` is sensitive to its content's `iron-select` events. If
the "content" element triggers an `iron-select` event, the `paper-menu-button`
will close automatically.

Example:

    <paper-menu-button>
      <paper-icon-button icon="menu"
slot="dropdown-trigger"></paper-icon-button> <paper-listbox
slot="dropdown-content"> <paper-item>Share</paper-item>
        <paper-item>Settings</paper-item>
        <paper-item>Help</paper-item>
      </paper-listbox>
    </paper-menu-button>

### Styling

The following custom properties and mixins are also available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-menu-button-dropdown-background` | Background color of the paper-menu-button dropdown | `--primary-background-color`
`--paper-menu-button` | Mixin applied to the paper-menu-button | `{}`
`--paper-menu-button-disabled` | Mixin applied to the paper-menu-button when disabled | `{}`
`--paper-menu-button-dropdown` | Mixin applied to the paper-menu-button dropdown | `{}`
`--paper-menu-button-content` | Mixin applied to the paper-menu-button content | `{}`

@hero hero.svg
@demo demo/index.html
*/

/**
   * Fired when the dropdown opens.
   *
   * @event paper-dropdown-open
   */

/**
   * Fired when the dropdown closes.
   *
   * @event paper-dropdown-close
   */

/**
     * True if the content is currently displayed.
     */

/**
     * The orientation against which to align the menu dropdown
     * horizontally relative to the dropdown trigger.
     */

/**
     * The orientation against which to align the menu dropdown
     * vertically relative to the dropdown trigger.
     */

/**
     * If true, the `horizontalAlign` and `verticalAlign` properties will
     * be considered preferences instead of strict requirements when
     * positioning the dropdown and may be changed if doing so reduces
     * the area of the dropdown falling outside of `fitInto`.
     */

/**
     * A pixel value that will be added to the position calculated for the
     * given `horizontalAlign`. Use a negative value to offset to the
     * left, or a positive value to offset to the right.
     */

/**
     * A pixel value that will be added to the position calculated for the
     * given `verticalAlign`. Use a negative value to offset towards the
     * top, or a positive value to offset towards the bottom.
     */

/**
     * If true, the dropdown will be positioned so that it doesn't overlap
     * the button.
     */

/**
     * Set to true to disable automatically closing the dropdown after
     * a selection has been made.
     */

/**
     * Set to true to enable automatically closing the dropdown after an
     * item has been activated, even if the selection did not change.
     */

/**
     * An animation config. If provided, this will be used to animate the
     * opening of the dropdown.
     */

/**
     * An animation config. If provided, this will be used to animate the
     * closing of the dropdown.
     */

/**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     */

/**
     * Whether focus should be restored to the button when the menu closes.
     */

/**
     * This is the element intended to be bound as the focus target
     * for the `iron-dropdown` contained by `paper-menu-button`.
     */

/**
   * The content element that is contained by the menu button, if any.
   */

/**
   * Toggles the dropdown content between opened and closed.
   */

/**
   * Make the dropdown content appear as an overlay positioned relative
   * to the dropdown trigger.
   */

/**
   * Hide the dropdown content.
   */

/**
   * When an `iron-select` event is received, the dropdown should
   * automatically close on the assumption that a value has been chosen.
   *
   * @param {CustomEvent} event A CustomEvent instance with type
   * set to `"iron-select"`.
   */

/**
   * Closes the dropdown when an `iron-activate` event is received if
   * `closeOnActivate` is true.
   *
   * @param {CustomEvent} event A CustomEvent of type 'iron-activate'.
   */

/**
   * When the dropdown opens, the `paper-menu-button` fires `paper-open`.
   * When the dropdown closes, the `paper-menu-button` fires `paper-close`.
   *
   * @param {boolean} opened True if the dropdown is opened, otherwise false.
   * @param {boolean} oldOpened The previous value of `opened`.
   */

// TODO(cdata): Update this when we can measure changes in distributed

// children in an idiomatic way.

// We poke this property in case the element has changed. This will

// cause the focus target for the `iron-dropdown` to be updated as

// necessary:

/**
   * If the dropdown is open when disabled becomes true, close the
   * dropdown.
   *
   * @param {boolean} disabled True if disabled, otherwise false.
   */

// EXTERNAL MODULE: ./node_modules/@polymer/paper-ripple/paper-ripple.js

// EXTERNAL MODULE: ./node_modules/@polymer/iron-iconset-svg/iron-iconset-svg.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu-icons.js

/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/

// CONCATENATED MODULE: ./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu-shared-styles.js

// EXTERNAL MODULE: ./node_modules/@polymer/iron-behaviors/iron-button-state.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu.js

/**
Material design: [Dropdown
menus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)

`paper-dropdown-menu` is similar to a native browser select element.
`paper-dropdown-menu` works with selectable content. The currently selected
item is displayed in the control. If no item is selected, the `label` is
displayed instead.

Example:

    <paper-dropdown-menu label="Your favourite pastry">
      <paper-listbox slot="dropdown-content">
        <paper-item>Croissant</paper-item>
        <paper-item>Donut</paper-item>
        <paper-item>Financier</paper-item>
        <paper-item>Madeleine</paper-item>
      </paper-listbox>
    </paper-dropdown-menu>

This example renders a dropdown menu with 4 options.

The child element with the slot `dropdown-content` is used as the dropdown
menu. This can be a [`paper-listbox`](paper-listbox), or any other or
element that acts like an [`iron-selector`](iron-selector).

Specifically, the menu child must fire an
[`iron-select`](iron-selector#event-iron-select) event when one of its
children is selected, and an
[`iron-deselect`](iron-selector#event-iron-deselect) event when a child is
deselected. The selected or deselected item must be passed as the event's
`detail.item` property.

Applications can listen for the `iron-select` and `iron-deselect` events
to react when options are selected and deselected.

### Styling

The following custom properties and mixins are also available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`
`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`
`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`
`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`
`--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`
`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`

You can also use any of the `paper-input-container` and `paper-menu-button`
style mixins and custom properties to style the internal input and menu button
respectively.

@group Paper Elements
@element paper-dropdown-menu
@demo demo/index.html
*/

/**
     * The derived "label" of the currently selected item. This value
     * is the `label` property on the selected item if set, or else the
     * trimmed text content of the selected item.
     */

/**
     * The last selected item. An item is selected if the dropdown menu has
     * a child with slot `dropdown-content`, and that child triggers an
     * `iron-select` event with the selected `item` in the `detail`.
     *
     * @type {?Object}
     */

/**
     * The value for this element that will be used when submitting in
     * a form. It reflects the value of `selectedItemLabel`. If set directly,
     * it will not update the `selectedItemLabel` value.
     */

/**
     * The label for the dropdown.
     */

/**
     * The placeholder for the dropdown.
     */

/**
     * The error message to display when invalid.
     */

/**
     * True if the dropdown is open. Otherwise, false.
     */

/**
     * Set to true to disable the floating label. Bind this to the
     * `<paper-input-container>`'s `noLabelFloat` property.
     */

/**
     * Set to true to always float the label. Bind this to the
     * `<paper-input-container>`'s `alwaysFloatLabel` property.
     */

/**
     * Overrides the vertical offset computed in
     * _computeMenuVerticalOffset.
     */

/**
     * Whether focus should be restored to the dropdown when the menu closes.
     */

// NOTE(cdata): Due to timing, a preselected value in a `IronSelectable`

// child will cause an `iron-select` event to fire while the element is

// still in a `DocumentFragment`. This has the effect of causing

// handlers not to fire. So, we double check this value on attached:

/**
   * The content element that is contained by the dropdown menu, if any.
   */

/**
   * Show the dropdown content.
   */

/**
   * A handler that is called when `iron-select` is fired.
   *
   * @param {CustomEvent} event An `iron-select` event.
   */

/**
   * A handler that is called when `iron-deselect` is fired.
   *
   * @param {CustomEvent} event An `iron-deselect` event.
   */

/**
   * A handler that is called when the dropdown is tapped.
   *
   * @param {CustomEvent} event A tap event.
   */

/**
   * Compute the label for the dropdown given a selected item.
   *
   * @param {Element} selectedItem A selected Element item, with an
   * optional `label` property.
   */

/**
   * Compute the vertical offset of the menu based on the value of
   * `noLabelFloat`.
   *
   * @param {boolean} noLabelFloat True if the label should not float
   * @param {number=} opt_verticalOffset Optional offset from the user
   * above the input, otherwise false.
   */

// Override offset if it's passed from the user.

// NOTE(cdata): These numbers are somewhat magical because they are

// derived from the metrics of elements internal to `paper-input`'s

// template. The metrics will change depending on whether or not the

// input has a floating label.

/**
   * Returns false if the element is required and does not have a selection,
   * and true otherwise.
   * @param {*=} _value Ignored.
   * @return {boolean} true if `required` is false, or if `required` is true
   * and the element has a valid selection.
   */

// CONCATENATED MODULE: ./node_modules/@polymer/iron-selector/iron-selection.js

/**
   * @param {!Function} selectCallback
   * @suppress {missingProvide}
   */

/**
   * Retrieves the selected item(s).
   *
   * @returns Returns the selected item(s). If the multi property is true,
   * `get` will return an array, otherwise it will return
   * the selected item or undefined if there is no selection.
   */

/**
   * Clears all the selection except the ones indicated.
   *
   * @param {Array} excludes items to be excluded.
   */

/**
   * Indicates if a given item is selected.
   *
   * @param {*} item The item whose selection state should be checked.
   * @return {boolean} Returns true if `item` is selected.
   */

/**
   * Sets the selection state for a given item to either selected or deselected.
   *
   * @param {*} item The item to select.
   * @param {boolean} isSelected True for selected, false for deselected.
   */

// proceed to update selection only if requested state differs from

// current

/**
   * Sets the selection state for a given item. If the `multi` property
   * is true, then the selected state of `item` will be toggled; otherwise
   * the `item` will be selected.
   *
   * @param {*} item The item to select.
   */

/**
   * Toggles the selection state for `item`.
   *
   * @param {*} item The item to toggle.
   */

// CONCATENATED MODULE: ./node_modules/@polymer/iron-selector/iron-selectable.js

/**
 * @polymerBehavior
 */

/**
   * Fired when iron-selector is activated (selected or deselected).
   * It is fired before the selected items are changed.
   * Cancel the event to abort selection.
   *
   * @event iron-activate
   */

/**
   * Fired when an item is selected
   *
   * @event iron-select
   */

/**
   * Fired when an item is deselected
   *
   * @event iron-deselect
   */

/**
   * Fired when the list of selectable items changes (e.g., items are
   * added or removed). The detail of the event is a mutation record that
   * describes what changed.
   *
   * @event iron-items-changed
   */

/**
     * If you want to use an attribute value or property of an element for
     * `selected` instead of the index, set this to the name of the attribute
     * or property. Hyphenated values are converted to camel case when used to
     * look up the property of a selectable element. Camel cased values are
     * *not* converted to hyphenated values for attribute lookup. It's
     * recommended that you provide the hyphenated form of the name so that
     * selection works in both cases. (Use `attr-or-property-name` instead of
     * `attrOrPropertyName`.)
     */

/**
     * Gets or sets the selected element. The default is to use the index of the
     * item.
     * @type {string|number}
     */

/**
     * Returns the currently selected item.
     *
     * @type {?Object}
     */

/**
     * The event that fires from items when they are selected. Selectable
     * will listen for this event from items and update the selection state.
     * Set to empty string to listen to no events.
     */

/**
     * This is a CSS selector string.  If this is set, only items that match the
     * CSS selector are selectable.
     */

/**
     * The class to set on elements when selected.
     */

/**
     * The attribute to set on elements when selected.
     */

/**
     * Default fallback if the selection based on selected with
     * `attrForSelected` is not found.
     */

/**
     * The list of items from which a selection can be made.
     */

/**
     * The set of excluded elements where the key is the `localName`
     * of the element that will be ignored from the item list.
     *
     * @default {template: 1}
     */

/**
   * Returns the index of the given item.
   *
   * @method indexOf
   * @param {Object} item
   * @returns Returns the index of the item
   */

/**
   * Selects the given value.
   *
   * @method select
   * @param {string|number} value the value to select.
   */

/**
   * Selects the previous item.
   *
   * @method selectPrevious
   */

/**
   * Selects the next item.
   *
   * @method selectNext
   */

/**
   * Selects the item at the given index.
   *
   * @method selectIndex
   */

/**
   * Force a synchronous update of the `items` property.
   *
   * NOTE: Consider listening for the `iron-items-changed` event to respond to
   * updates to the set of selectable items after updates to the DOM list and
   * selection state have been made.
   *
   * WARNING: If you are using this method, you should probably consider an
   * alternate approach. Synchronously querying for items is potentially
   * slow for many use cases. The `items` property will update asynchronously
   * on its own to reflect selectable items in the DOM.
   */

// NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger

// `observeNodes` callbacks. Polymer 2.x returns an object from

// `observeNodes` with a `flush` that synchronously gives the callback any

// pending MutationRecords (retrieved with `takeRecords`). Any case where

// ShadyDOM flushes were expected to synchronously trigger item updates

// will now require calling `forceSynchronousItemUpdate`.

// UNUSED, FOR API COMPATIBILITY

// Check for items, since this array is populated only when attached

// Since Number(0) is falsy, explicitly check for undefined

// observe items change under the given node.

// Let other interested parties know about the change so that

// we don't have to recreate mutation observers everywhere.

/**
     * If true, multiple selections are allowed.
     */

/**
     * Gets or sets the selected elements. This is used instead of `selected`
     * when `multi` is true.
     */

/**
     * Returns an array of currently selected items.
     */

/**
   * Selects the given value. If the `multi` property is true, then the selected
   * state of the `value` will be toggled; otherwise the `value` will be
   * selected.
   *
   * @method select
   * @param {string|number} value the value to select.
   */

// clear all but the current selected items

// select only those not selected yet

/**
     * Returns the currently focused item.
     * @type {?Object}
     */

/**
     * The attribute to use on menu items to look up the item title. Typing the
     * first letter of an item when the menu is open focuses that item. If
     * unset, `textContent` will be used.
     */

/**
     * @type {boolean}
     */

/**
   * The list of keys has been taken from
   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
   * @private
   */

/**
   * Selects the given value. If the `multi` property is true, then the selected
   * state of the `value` will be toggled; otherwise the `value` will be
   * selected.
   *
   * @param {string|number} value the value to select.
   */

// Cancel automatically focusing a default item if the menu received focus

// through a user action selecting a particular item.

/**
   * Resets all tabindex attributes to the appropriate value based on the
   * current selection state. The appropriate value is `0` (focusable) for
   * the default selected item, and `-1` (not keyboard focusable) for all
   * other items.
   */

/**
   * Sets appropriate ARIA based on whether or not the menu is meant to be
   * multi-selectable.
   *
   * @param {boolean} multi True if the menu should be multi-selectable.
   */

/**
   * Given a KeyboardEvent, this method will focus the appropriate item in the
   * menu (if there is a relevant item, and it is possible to focus it).
   *
   * @param {KeyboardEvent} event A KeyboardEvent.
   */

// Make sure that the key pressed is not a modifier key.

// getModifierState is not being used, as it is not available in Safari

// earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)

/**
   * Focuses the previous item (relative to the currently focused item) in the
   * menu, disabled items will be skipped.
   * Loop until length + 1 to handle case of single item in menu.
   */

// Focus might not have worked, if the element was hidden or not

// focusable. In that case, try again.

/**
   * Focuses the next item (relative to the currently focused item) in the
   * menu, disabled items will be skipped.
   * Loop until length + 1 to handle case of single item in menu.
   */

/**
   * Mutates items in the menu based on provided selection details, so that
   * all items correctly reflect selection state.
   *
   * @param {Element} item An item in the menu.
   * @param {boolean} isSelected True if the item should be shown in a
   * selected state, otherwise false.
   */

/**
   * Discretely updates tabindex values among menu items as the focused item
   * changes.
   *
   * @param {Element} focusedItem The element that is currently focused.
   * @param {?Element} old The last element that was considered focused, if
   * applicable.
   */

/**
   * A handler that responds to mutation changes related to the list of items
   * in the menu.
   *
   * @param {CustomEvent} event An event containing mutation records as its
   * detail.
   */

/**
   * Handler that is called when the menu receives focus.
   *
   * @param {FocusEvent} event A focus event.
   */

// Do not focus the selected tab if the deepest target is part of the

// menu element's local DOM and is focusable.

/** @type {?HTMLElement} */

// clear the cached focus item

// focus the selected item when the menu receives focus, or the first item

// if no item is selected

// We find the first none-disabled item (if one exists)

/**
   * Handler that is called when the up key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */

// up and down arrows moves the focus

/**
   * Handler that is called when the down key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */

/**
   * Handler that is called when the esc key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */

/**
   * Handler that is called when a keydown event is detected.
   *
   * @param {KeyboardEvent} event A keyboard event.
   */

// all other keys focus the menu item starting with that character

// override _activateHandler

/**
   * Updates this element's tab index when it's enabled/disabled.
   * @param {boolean} disabled
   */

// CONCATENATED MODULE: ./node_modules/@polymer/iron-selector/iron-multi-selectable.js

/**
 * @polymerBehavior IronMultiSelectableBehavior
 */

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/utils/html-tag.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-listbox/paper-listbox.js

/**
Material design:
[Menus](https://www.google.com/design/spec/components/menus.html)

`<paper-listbox>` implements an accessible listbox control with Material Design
styling. The focused item is highlighted, and the selected item has bolded text.

    <paper-listbox>
      <paper-item>Item 1</paper-item>
      <paper-item>Item 2</paper-item>
    </paper-listbox>

An initial selection can be specified with the `selected` attribute.

    <paper-listbox selected="0">
      <paper-item>Item 1</paper-item>
      <paper-item>Item 2</paper-item>
    </paper-listbox>

Make a multi-select listbox with the `multi` attribute. Items in a multi-select
listbox can be deselected, and multiple item can be selected.

    <paper-listbox multi>
      <paper-item>Item 1</paper-item>
      <paper-item>Item 2</paper-item>
    </paper-listbox>

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-listbox-background-color`   | Menu background color |
`--primary-background-color`
`--paper-listbox-color`              | Menu foreground color |
`--primary-text-color`
`--paper-listbox`                    | Mixin applied to the listbox | `{}`

### Accessibility

`<paper-listbox>` has `role="listbox"` by default. A multi-select listbox will
also have `aria-multiselectable` set. It implements key bindings to navigate
through the listbox with the up and down arrow keys, esc to exit the listbox,
and enter to activate a listbox item. Typing the first letter of a listbox item
will also focus it.

@group Paper Elements
@element paper-listbox
@demo demo/index.html
*/

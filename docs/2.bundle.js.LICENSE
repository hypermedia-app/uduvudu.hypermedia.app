/***/

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/polymer-element.js

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/polymer-legacy.js + 10 modules

// CONCATENATED MODULE: ./node_modules/@polymer/iron-flex-layout/iron-flex-layout.js

/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/

/**
The `<iron-flex-layout>` component provides simple ways to use
[CSS flexible box
layout](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes),
also known as flexbox. Note that this is an old element, that was written
before all modern browsers had non-prefixed flex styles. As such, nowadays you
don't really need to use this element anymore, and can use CSS flex styles
directly in your code.

This component provides two different ways to use flexbox:

1. [Layout
classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).
The layout class stylesheet provides a simple set of class-based flexbox rules,
that let you specify layout properties directly in markup. You must include this
file in every element that needs to use them.

    Sample use:

    ```
    <custom-element-demo>
      <template>
        <script src="../webcomponentsjs/webcomponents-lite.js"></script>
        <next-code-block></next-code-block>
      </template>
    </custom-element-demo>
    ```

    ```js
    import {html} from '@polymer/polymer/lib/utils/html-tag.js';
    import '@polymer/iron-flex-layout/iron-flex-layout-classes.js';

    const template = html`
      <style is="custom-style" include="iron-flex iron-flex-alignment"></style>
      <style>
        .test { width: 100px; }
      </style>
      <div class="layout horizontal center-center">
        <div class="test">horizontal layout center alignment</div>
      </div>
    `;
    document.body.appendChild(template.content);
    ```

2. [Custom CSS
mixins](https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html).
The mixin stylesheet includes custom CSS mixins that can be applied inside a CSS
rule using the `@apply` function.

Please note that the old [/deep/ layout
classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/classes)
are deprecated, and should not be used. To continue using layout properties
directly in markup, please switch to using the new `dom-module`-based
[layout
classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).
Please note that the new version does not use `/deep/`, and therefore requires
you to import the `dom-modules` in every element that needs to use them.

@group Iron Elements
@pseudoElement iron-flex-layout
@demo demo/index.html
*/

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@polymer/iron-meta/iron-meta.js

/**
   * @param {{
   *   type: (string|null|undefined),
   *   key: (string|null|undefined),
   *   value: *,
   * }=} options
   */

/** @type {string} */

/** @type {string|null|undefined} */

/** @type {*} */

/** @return {*} */

/** @param {*} value */

/** @return {!Array<*>} */

/**
   * @param {string} key
   * @return {*}
   */

// This function is used to convince Closure not to remove constructor calls

// for instances that are not held anywhere. For example, when

// `new IronMeta({...})` is used only for the side effect of adding a value.

/**
`iron-meta` is a generic element you can use for sharing information across the
DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
such that any instance of iron-meta has access to the shared information. You
can use `iron-meta` to share whatever you want (or create an extension [like
x-meta] for enhancements).

The `iron-meta` instances containing your actual data can be loaded in an
import, or constructed in any way you see fit. The only requirement is that you
create them before you try to access them.

Examples:

If I create an instance like this:

    <iron-meta key="info" value="foo/bar"></iron-meta>

Note that value="foo/bar" is the metadata I've defined. I could define more
attributes or use child nodes to define additional metadata.

Now I can access that element (and it's metadata) from any iron-meta instance
via the byKey method, e.g.

    meta.byKey('info');

Pure imperative form would be like:

    document.createElement('iron-meta').byKey('info');

Or, in a Polymer element, you can include a meta in your template:

    <iron-meta id="meta"></iron-meta>
    ...
    this.$.meta.byKey('info');

@group Iron Elements
@demo demo/index.html
@element iron-meta
*/

/**
     * The type of meta-data.  All meta-data of the same type is stored
     * together.
     * @type {string}
     */

/**
     * The key used to store `value` under the `type` namespace.
     * @type {?string}
     */

/**
     * The meta-data to store or retrieve.
     * @type {*}
     */

/**
     * If true, `value` is set to the iron-meta instance itself.
     */

/**
   * Retrieves meta data value by key.
   *
   * @method byKey
   * @param {string} key The key of the meta-data to be returned.
   * @return {*}
   */

// EXTERNAL MODULE: ./node_modules/@polymer/polymer/lib/legacy/polymer.dom.js + 1 modules

// CONCATENATED MODULE: ./node_modules/@polymer/iron-icon/iron-icon.js

/**

The `iron-icon` element displays an icon. By default an icon renders as a 24px
square.

Example using src:

    <iron-icon src="star.png"></iron-icon>

Example setting size to 32px x 32px:

    <iron-icon class="big" src="big_star.png"></iron-icon>

    <style is="custom-style">
      .big {
        --iron-icon-height: 32px;
        --iron-icon-width: 32px;
      }
    </style>

The iron elements include several sets of icons. To use the default set of
icons, import `iron-icons.js` and use the `icon` attribute to specify an icon:

    <script type="module">
      import "@polymer/iron-icons/iron-icons.js";
    </script>

    <iron-icon icon="menu"></iron-icon>

To use a different built-in set of icons, import the specific
`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.
For example, to use a communication icon, you would use:

    <script type="module">
      import "@polymer/iron-icons/communication-icons.js";
    </script>

    <iron-icon icon="communication:email"></iron-icon>

You can also create custom icon sets of bitmap or SVG icons.

Example of using an icon named `cherry` from a custom iconset with the ID
`fruit`:

    <iron-icon icon="fruit:cherry"></iron-icon>

See `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to
create a custom iconset.

See the `iron-icons` demo to see the icons available in the various iconsets.

### Styling

The following custom properties are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--iron-icon` | Mixin applied to the icon | {}
`--iron-icon-width` | Width of the icon | `24px`
`--iron-icon-height` | Height of the icon | `24px`
`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`
`--iron-icon-stroke-color` | Stroke color of the svg icon | none

@group Iron Elements
@element iron-icon
@demo demo/index.html
@hero hero.svg
@homepage polymer.github.io
*/

/**
     * The name of the icon to use. The name should be of the form:
     * `iconset_name:icon_name`.
     */

/**
     * The name of the theme to used, if one is specified by the
     * iconset.
     */

/**
     * If using iron-icon without an iconset, you can set the src to be
     * the URL of an individual icon image file. Note that this will take
     * precedence over a given icon attribute.
     */

/**
     * @type {!IronMeta}
     */

/** @suppress {visibility} */

/** @type {?Polymer.Iconset} */

// CONCATENATED MODULE: ./node_modules/@polymer/iron-iconset-svg/iron-iconset-svg.js

/**
 * The `iron-iconset-svg` element allows users to define their own icon sets
 * that contain svg icons. The svg icon elements should be children of the
 * `iron-iconset-svg` element. Multiple icons should be given distinct id's.
 *
 * Using svg elements to create icons has a few advantages over traditional
 * bitmap graphics like jpg or png. Icons that use svg are vector based so
 * they are resolution independent and should look good on any device. They
 * are stylable via css. Icons can be themed, colorized, and even animated.
 *
 * Example:
 *
 *     <iron-iconset-svg name="my-svg-icons" size="24">
 *       <svg>
 *         <defs>
 *           <g id="shape">
 *             <rect x="12" y="0" width="12" height="24" />
 *             <circle cx="12" cy="12" r="12" />
 *           </g>
 *         </defs>
 *       </svg>
 *     </iron-iconset-svg>
 *
 * This will automatically register the icon set "my-svg-icons" to the iconset
 * database.  To use these icons from within another element, make a
 * `iron-iconset` element and call the `byId` method
 * to retrieve a given iconset. To apply a particular icon inside an
 * element use the `applyIcon` method. For example:
 *
 *     iconset.applyIcon(iconNode, 'car');
 *
 * @element iron-iconset-svg
 * @demo demo/index.html
 * @implements {Polymer.Iconset}
 */

/**
     * The name of the iconset.
     */

/**
     * The size of an individual icon. Note that icons must be square.
     */

/**
     * Set to true to enable mirroring of icons where specified when they are
     * stamped. Icons that should be mirrored should be decorated with a
     * `mirror-in-rtl` attribute.
     *
     * NOTE: For performance reasons, direction will be resolved once per
     * document per iconset, so moving icons in and out of RTL subtrees will
     * not cause their mirrored state to change.
     */

/**
     * Set to true to measure RTL based on the dir attribute on the body or
     * html elements (measured on document.body or document.documentElement as
     * available).
     */

/**
   * Construct an array of all icon names in this iconset.
   *
   * @return {!Array} Array of icon names.
   */

/**
   * Applies an icon to the given element.
   *
   * An svg icon is prepended to the element's shadowRoot if it exists,
   * otherwise to the element itself.
   *
   * If RTL mirroring is enabled, and the icon is marked to be mirrored in
   * RTL, the element will be tested (once and only once ever for each
   * iconset) to determine the direction of the subtree the element is in.
   * This direction will apply to all future icon applications, although only
   * icons marked to be mirrored will be affected.
   *
   * @method applyIcon
   * @param {Element} element Element to which the icon is applied.
   * @param {string} iconName Name of the icon to apply.
   * @return {?Element} The svg element which renders the icon.
   */

// Remove old svg element

// install new svg element

// insert svg element into shadow root, if it exists

/**
   * Remove an icon from the given element by undoing the changes effected
   * by `applyIcon`.
   *
   * @param {Element} element The element from which the icon is removed.
   */

/**
   * Measures and memoizes the direction of the element. Note that this
   * measurement is only done once and the result is memoized for future
   * invocations.
   */

/**
   *
   * When name is changed, register iconset metadata
   *
   */

/**
   * Create a map of child SVG elements by id.
   *
   * @return {!Object} Map of id's to SVG elements.
   */

// Objects chained to Object.prototype (`{}`) have members. Specifically,

// on FF there is a `watch` method that confuses the icon map, so we

// need to use a null-based object here.

/**
   * Produce installable clone of the SVG element matching `id` in this
   * iconset, or `undefined` if there is no matching element.
   *
   * @return {Element} Returns an installable clone of the SVG element
   * matching `id`.
   */

// create the icon map on-demand, since the iconset itself has no discrete

// signal to know when it's children are fully parsed

/**
   * @param {Element} sourceSvg
   * @param {number} size
   * @param {Boolean} mirrorAllowed
   * @return {Element}
   */

// TODO(dfreedm): `pointer-events: none` works around

// https://crbug.com/370136

// TODO(sjmiles): inline style may not be ideal, but avoids requiring a

// shadow-root

// CONCATENATED MODULE: ./node_modules/@polymer/iron-icons/iron-icons.js

/**
@license
Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/

/**

`iron-icons` is a utility import that includes the definition for the
`iron-icon` element, `iron-iconset-svg` element, as well as an import for the
default icon set.

The `iron-icons` directory also includes imports for additional icon sets that
can be loaded into your project.

Example loading icon set:

    <script type="module">
      import '@polymer/iron-icons/maps-icons.js';
    </script>

To use an icon from one of these sets, first prefix your `iron-icon` with the
icon set name, followed by a colon, ":", and then the icon id.

Example using the directions-bus icon from the maps icon set:

    <iron-icon icon="maps:directions-bus"></iron-icon>

See [iron-icon](https://www.webcomponents.org/element/@polymer/iron-icon) for
more information about working with icons.

See [iron-iconset](https://www.webcomponents.org/element/@polymer/iron-iconset)
and
[iron-iconset-svg](https://www.webcomponents.org/element/@polymer/iron-iconset-svg)
for more information about how to create a custom iconset.

@group Iron Elements
@pseudoElement iron-icons
@demo demo/index.html
*/

// EXTERNAL MODULE: ./node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js

// CONCATENATED MODULE: ./node_modules/@polymer/iron-collapse/iron-collapse.js

/**
`iron-collapse` creates a collapsible block of content.  By default, the content
will be collapsed.  Use `opened` or `toggle()` to show/hide the content.

    <button on-click="toggle">toggle collapse</button>

    <iron-collapse id="collapse">
      <div>Content goes here...</div>
    </iron-collapse>

    ...

    toggle: function() {
      this.$.collapse.toggle();
    }

`iron-collapse` adjusts the max-height/max-width of the collapsible element to
show/hide the content.  So avoid putting padding/margin/border on the
collapsible directly, and instead put a div inside and style that.

    <style>
      .collapse-content {
        padding: 15px;
        border: 1px solid #dedede;
      }
    </style>

    <iron-collapse>
      <div class="collapse-content">
        <div>Content goes here...</div>
      </div>
    </iron-collapse>

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--iron-collapse-transition-duration` | Animation transition duration | `300ms`

@group Iron Elements
@hero hero.svg
@demo demo/index.html
@element iron-collapse
*/

/**
     * If true, the orientation is horizontal; otherwise is vertical.
     *
     * @attribute horizontal
     */

/**
     * Set opened to true to show the collapse element and to false to hide it.
     *
     * @attribute opened
     */

/**
     * When true, the element is transitioning its opened state. When false,
     * the element has finished opening/closing.
     *
     * @attribute transitioning
     */

/**
     * Set noAnimation to true to disable animations.
     *
     * @attribute noAnimation
     */

/**
     * Stores the desired size of the collapse body.
     * @private
     */

/**
   * `maxWidth` or `maxHeight`.
   * @private
   */

/**
   * `max-width` or `max-height`.
   * @private
   */

/**
   * Toggle the opened state.
   *
   * @method toggle
   */

/**
   * Updates the size of the element.
   * @param {string} size The new value for `maxWidth`/`maxHeight` as css property value, usually `auto` or `0px`.
   * @param {boolean=} animated if `true` updates the size with an animation, otherwise without.
   */

// Consider 'auto' as '', to take full size.

// If we can animate, must do some prep work.

// Animation will start at the current size.

// For `auto` we must calculate what is the final size for the animation.

// After the transition is done, _transitionEnd will set the size back to

// `auto`.

// Go to startSize without animation.

// Force layout to ensure transition will go. Set scrollTop to itself

// so that compilers won't remove it.

// Enable animation.

// If final size is the same as startSize it will not animate.

// Set the final size.

// If it won't animate, call transitionEnd to set correct classes.

/**
   * enableTransition() is deprecated, but left over so it doesn't break
   * existing code. Please use `noAnimation` property instead.
   *
   * @method enableTransition
   * @deprecated since version 1.0.4
   */

// Focus the current collapse.

// CONCATENATED MODULE: ./node_modules/@polymer/paper-styles/color.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-styles/default-theme.js

/* Taken from
 * https://www.google.com/design/spec/style/color.html#color-ui-color-application
 */

// CONCATENATED MODULE: ./node_modules/@polymer/iron-behaviors/iron-control-state.js

/**
 * @demo demo/index.html
 * @polymerBehavior
 */

/**
     * If true, the element currently has focus.
     */

/**
     * If true, the user cannot interact with this element.
     */

/**
     * Value of the `tabindex` attribute before `disabled` was activated.
     * `null` means the attribute was not present.
     * @type {?string|undefined}
     */

/**
   * @return {void}
   */

// Polymer takes care of retargeting events.

// Read the `tabindex` attribute instead of the `tabIndex` property.

// The property returns `-1` if there is no `tabindex` attribute.

// This distinction is important when restoring the value because

// leaving `-1` hides shadow root children from the tab order.

// _controlStateChanged is abstract, follow-on behaviors may implement it

// EXTERNAL MODULE: ./node_modules/@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js

// CONCATENATED MODULE: ./node_modules/@polymer/iron-behaviors/iron-button-state.js

/**
 * @demo demo/index.html
 * @polymerBehavior IronButtonState
 */

/**
     * If true, the user is currently holding down the button.
     */

/**
     * If true, the button toggles the active state with each tap or press
     * of the spacebar.
     */

/**
     * If true, the button is a toggle and is currently in the active state.
     */

/**
     * True if the element is currently being pressed by a "pointer," which
     * is loosely defined as mouse or touch input (but specifically excluding
     * keyboard input).
     */

/**
     * True if the input device that caused the element to receive focus
     * was a keyboard.
     */

/**
     * The aria attribute to be set if the button is a toggle and in the
     * active state.
     */

/**
   * @type {!Object}
   */

// a tap is needed to toggle the active state

// to emulate native checkbox, (de-)activations from a user interaction fire

// 'change' events

/**
   * @param {!KeyboardEvent} event .
   */

// Ignore the event if this is coming from a focused light child, since that

// element will deal with it.

/** @type {Node} */

// trigger click asynchronously, the asynchrony is useful to allow one

// event handler to unwind before triggering another event

// any of these changes are considered a change to button state

// provide hook for follow-on behaviors to react to button-state

/** @polymerBehavior */

// CONCATENATED MODULE: ./node_modules/@polymer/paper-ripple/paper-ripple.js

/**
 * @param {HTMLElement} element
 * @constructor
 */

// Linear increase in background opacity, capped at the opacity

// of the wavefront (waveOpacity).

// 2d transform for safari because of border-radius and overflow:hidden

// clipping bug. https://bugs.webkit.org/show_bug.cgi?id=98538

/** @param {Event=} event */

/**
Material design: [Surface
reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)

`paper-ripple` provides a visual effect that other paper elements can
use to simulate a rippling effect emanating from the point of contact.  The
effect can be visualized as a concentric circle with motion.

Example:

    <div style="position:relative">
      <paper-ripple></paper-ripple>
    </div>

Note, it's important that the parent container of the ripple be relative
position, otherwise the ripple will emanate outside of the desired container.

`paper-ripple` listens to "mousedown" and "mouseup" events so it would display
ripple effect when touches on it.  You can also defeat the default behavior and
manually route the down and up actions to the ripple element.  Note that it is
important if you call `downAction()` you will have to make sure to call
`upAction()` so that `paper-ripple` would end the animation loop.

Example:

    <paper-ripple id="ripple" style="pointer-events: none;"></paper-ripple>
    ...
    downAction: function(e) {
      this.$.ripple.downAction(e.detail);
    },
    upAction: function(e) {
      this.$.ripple.upAction();
    }

Styling ripple effect:

  Use CSS color property to style the ripple:

    paper-ripple {
      color: #4285f4;
    }

  Note that CSS color property is inherited so it is not required to set it on
  the `paper-ripple` element directly.

By default, the ripple is centered on the point of contact.  Apply the
`recenters` attribute to have the ripple grow toward the center of its
container.

    <paper-ripple recenters></paper-ripple>

You can also  center the ripple inside its container from the start.

    <paper-ripple center></paper-ripple>

Apply `circle` class to make the rippling effect within a circle.

    <paper-ripple class="circle"></paper-ripple>

@group Paper Elements
@element paper-ripple
@hero hero.svg
@demo demo/index.html
*/

/**
     * The initial opacity set on the wave.
     *
     * @attribute initialOpacity
     * @type number
     * @default 0.25
     */

/**
     * How fast (opacity per second) the wave fades out.
     *
     * @attribute opacityDecayVelocity
     * @type number
     * @default 0.8
     */

/**
     * If true, ripples will exhibit a gravitational pull towards
     * the center of their container as they fade away.
     *
     * @attribute recenters
     * @type boolean
     * @default false
     */

/**
     * If true, ripples will center inside its container
     *
     * @attribute recenters
     * @type boolean
     * @default false
     */

/**
     * A list of the visual ripples.
     *
     * @attribute ripples
     * @type Array
     * @default []
     */

/**
     * True when there are visible ripples animating within the
     * element.
     */

/**
     * If true, the ripple will remain in the "down" state until `holdDown`
     * is set to false again.
     */

/**
     * If true, the ripple will not generate a ripple effect
     * via pointer interaction.
     * Calling ripple's imperative api like `simulatedRipple` will
     * still generate the ripple effect.
     */

// Set up a11yKeysBehavior to listen to key events on the target,

// so that space and enter activate the ripple even if the target doesn't

// handle key events. The key handlers deal with `noink` themselves.

// DOCUMENT_FRAGMENT_NODE

/** @type {!EventTarget} */

// Please see polymer/polymer#1305

/**
   * Provokes a ripple down effect via a UI event,
   * respecting the `noink` property.
   * @param {Event=} event
   */

/**
   * Provokes a ripple down effect via a UI event,
   * *not* respecting the `noink` property.
   * @param {Event=} event
   */

/**
   * Provokes a ripple up effect via a UI event,
   * respecting the `noink` property.
   * @param {Event=} event
   */

/**
   * Provokes a ripple up effect via a UI event,
   * *not* respecting the `noink` property.
   * @param {Event=} event
   */

/**
   * Deprecated. Please use animateRipple() instead.
   *
   * This method name conflicts with Element#animate().
   * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate.
   *
   * @suppress {checkTypes}
   */

/**
   * An alias for animate() whose name does not conflict with the platform
   * Element.animate() method.
   */

// note: holdDown does not respect noink since it can be a focus based

// effect.

/**
  Fired when the animation finishes.
  This is useful if you want to wait until
  the ripple animation finishes to perform some action.

  @event transitionend
  @param {{node: Object}} detail Contains the animated node.
  */

// CONCATENATED MODULE: ./node_modules/@polymer/paper-behaviors/paper-ripple-behavior.js

/**
 * `PaperRippleBehavior` dynamically implements a ripple when the element has
 * focus via pointer or keyboard.
 *
 * NOTE: This behavior is intended to be used in conjunction with and after
 * `IronButtonState` and `IronControlState`.
 *
 * @polymerBehavior PaperRippleBehavior
 */

/**
     * If true, the element will not produce a ripple effect when interacted
     * with via the pointer.
     */

/**
     * @type {Element|undefined}
     */

/**
   * Ensures a `<paper-ripple>` element is available when the element is
   * focused.
   */

/**
   * In addition to the functionality provided in `IronButtonState`, ensures
   * a ripple effect is created when the element is in a `pressed` state.
   */

/**
   * Ensures this element contains a ripple effect. For startup efficiency
   * the ripple effect is dynamically on demand when needed.
   * @param {!Event=} optTriggeringEvent (optional) event that triggered the
   * ripple.
   */

// Check if the event happened inside of the ripple container

// Fall back to host instead of the root because distributed text

// nodes are not valid event targets

/**
   * Returns the `<paper-ripple>` element used by this element to create
   * ripple effects. The element's ripple is created on demand, when
   * necessary, and calling this method will force the
   * ripple to be created.
   */

/**
   * Returns true if this element currently contains a ripple effect.
   * @return {boolean}
   */

/**
   * Create the element's ripple effect via creating a `<paper-ripple>`.
   * Override this method to customize the ripple element.
   * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.
   */

/** @type {!PaperRippleElement} */

// CONCATENATED MODULE: ./node_modules/@polymer/paper-behaviors/paper-inky-focus-behavior.js

/**
 * `PaperInkyFocusBehavior` implements a ripple when the element has keyboard
 * focus.
 *
 * @polymerBehavior PaperInkyFocusBehavior
 */

// CONCATENATED MODULE: ./node_modules/@polymer/font-roboto/roboto.js

// ensure this file can only be parsed as a module.

// Give the user the choice to opt out of font loading.

/**
Material design: [Icon
toggles](https://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons)

`paper-icon-button` is a button with an image placed at the center. When the
user touches the button, a ripple effect emanates from the center of the button.

`paper-icon-button` does not include a default icon set. To use icons from the
default set, include `PolymerElements/iron-icons/iron-icons.html`, and use the
`icon` attribute to specify which icon from the icon set to use.

    <paper-icon-button icon="menu"></paper-icon-button>

See [`iron-iconset`](iron-iconset) for more information about
how to use a custom icon set.

Example:

    <script type="module">
      import '@polymer/iron-icons/iron-icons.js';
    </script>

    <paper-icon-button icon="favorite"></paper-icon-button>
    <paper-icon-button src="star.png"></paper-icon-button>

To use `paper-icon-button` as a link, wrap it in an anchor tag. Since
`paper-icon-button` will already receive focus, you may want to prevent the
anchor tag from receiving focus as well by setting its tabindex to -1.

    <a href="https://www.polymer-project.org" tabindex="-1">
      <paper-icon-button icon="polymer"></paper-icon-button>
    </a>

### Styling

Style the button with CSS as you would a normal DOM element. If you are using
the icons provided by `iron-icons`, they will inherit the foreground color of
the button.

    /* make a red "favorite" button *\/
    <paper-icon-button icon="favorite" style="color: red;"></paper-icon-button>

By default, the ripple is the same color as the foreground at 25% opacity. You
may customize the color using the `--paper-icon-button-ink-color` custom
property.

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-icon-button-disabled-text` | The color of the disabled button | `--disabled-text-color`
`--paper-icon-button-ink-color` | Selected/focus ripple color | `--primary-text-color`
`--paper-icon-button` | Mixin for a button | `{}`
`--paper-icon-button-disabled` | Mixin for a disabled button | `{}`
`--paper-icon-button-hover` | Mixin for button on hover | `{}`

@group Paper Elements
@element paper-icon-button
@demo demo/index.html
*/

/**
     * The URL of an image for the icon. If the src property is specified,
     * the icon property should not be.
     */

/**
     * Specifies the icon name or index in the set of icons available in
     * the icon's icon set. If the icon property is specified,
     * the src property should not be.
     */

/**
     * Specifies the alternate text for the button, for accessibility.
     */

// Don't stomp over a user-set aria-label.

// CONCATENATED MODULE: ./node_modules/@polymer/paper-styles/typography.js

/*
Typographic styles are provided matching the Material Design standard styles:
http://www.google.com/design/spec/style/typography.html#typography-standard-styles

Note that these are English/Latin centric styles. You may need to further adjust
line heights and weights for CJK typesetting. See the notes in the Material
Design typography section.
*/

// CONCATENATED MODULE: ./node_modules/@polymer/paper-item/paper-item-shared-styles.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-item/paper-item-behavior.js

/*
`PaperItemBehavior` is a convenience behavior shared by <paper-item> and
<paper-icon-item> that manages the shared control states and attributes of
the items.
*/

/** @polymerBehavior PaperItemBehavior */

// CONCATENATED MODULE: ./node_modules/@polymer/paper-item/paper-item.js

/**
Material design:
[Lists](https://www.google.com/design/spec/components/lists.html)

`<paper-item>` is an interactive list item. By default, it is a horizontal
flexbox.

    <paper-item>Item</paper-item>

Use this element with `<paper-item-body>` to make Material Design styled
two-line and three-line items.

    <paper-item>
      <paper-item-body two-line>
        <div>Show your status</div>
        <div secondary>Your status is visible to everyone</div>
      </paper-item-body>
      <iron-icon icon="warning"></iron-icon>
    </paper-item>

To use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will
already receive focus, you may want to prevent the anchor tag from receiving
focus as well by setting its tabindex to -1.

    <a href="https://www.polymer-project.org/" tabindex="-1">
      <paper-item raised>Polymer Project</paper-item>
    </a>

If you are concerned about performance and want to use `paper-item` in a
`paper-listbox` with many items, you can just use a native `button` with the
`paper-item` class applied (provided you have correctly included the shared
styles):

    <style is="custom-style" include="paper-item-shared-styles"></style>

    <paper-listbox>
      <button class="paper-item" role="option">Inbox</button>
      <button class="paper-item" role="option">Starred</button>
      <button class="paper-item" role="option">Sent mail</button>
    </paper-listbox>

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-item-min-height` | Minimum height of the item | `48px`
`--paper-item` | Mixin applied to the item | `{}`
`--paper-item-selected-weight` | The font weight of a selected item | `bold`
`--paper-item-selected` | Mixin applied to selected paper-items | `{}`
`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`
`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`
`--paper-item-focused` | Mixin applied to focused paper-items | `{}`
`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`

### Accessibility

This element has `role="listitem"` by default. Depending on usage, it may be
more appropriate to set `role="menuitem"`, `role="menuitemcheckbox"` or
`role="menuitemradio"`.

    <paper-item role="menuitemcheckbox">
      <paper-item-body>
        Show your status
      </paper-item-body>
      <paper-checkbox></paper-checkbox>
    </paper-item>

@group Paper Elements
@element paper-item
@demo demo/index.html
*/

// CONCATENATED MODULE: ./node_modules/@polymer/paper-item/paper-item-body.js

/*
Use `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-
or three- line items. It is a flex item that is a vertical flexbox.

    <paper-item>
      <paper-item-body two-line>
        <div>Show your status</div>
        <div secondary>Your status is visible to everyone</div>
      </paper-item-body>
    </paper-item>

The child elements with the `secondary` attribute is given secondary text
styling.

### Styling

The following custom properties and mixins are available for styling:

Custom property | Description | Default
----------------|-------------|----------
`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`
`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`
`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`
`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`

*/

// CONCATENATED MODULE: ./node_modules/@polymer/paper-styles/shadow.js

// CONCATENATED MODULE: ./node_modules/@polymer/paper-styles/paper-styles.js

/**
The `<paper-styles>` component provides simple ways to use Material Design CSS
styles in your application. The following imports are available:

1.
[color.js](https://github.com/PolymerElements/paper-styles/blob/master/color.html):
a complete list of the colors defined in the Material Design
[palette](https://www.google.com/design/spec/style/color.html)

2.
[default-theme.js](https://github.com/PolymerElements/paper-styles/blob/master/default-theme.html):
text, background and accent colors that match the default Material Design theme

3.
[shadow.js](https://material.io/design/environment/light-shadows.html#shadows):
Material Design
[elevation](https://material.io/design/environment/light-shadows.html#shadows)
and shadow styles

4.
[typography.js](https://github.com/PolymerElements/paper-styles/blob/master/typography.html):
Material Design
[font](http://www.google.com/design/spec/style/typography.html#typography-styles)
styles and sizes

5.
[demo-pages.js](https://github.com/PolymerElements/paper-styles/blob/master/demo-pages.html):
generic styles used in the PolymerElements demo pages

We recommend importing each of these individual files, and using the style
mixins available in each ones, rather than the aggregated `paper-styles.html` as
a whole.

@group Paper Elements
@pseudoElement paper-styles
@demo demo/index.html
*/

// CONCATENATED MODULE: ./node_modules/paper-collapse-item/simple-paper-item.js

/*
    A <paper-item> that avoids problems with <paper-input> children.  See
href="https://github.com/PolymerElements/paper-item/issues/103  for details.

    */

// CONCATENATED MODULE: ./node_modules/paper-collapse-item/paper-collapse-item.js

/**
 * `PaperCollapseItem`
 *
 * A Material Design [item with header and collapsible content](https://www.google.com/design/spec/components/lists.html)
 *
 * ### Example
 *
 * ```html
 * <paper-collapse-item icon="icons:favorite" header="Item 1" opened>
 *  Lots of very interesting content.
 * </paper-collapse-item>
 * <paper-collapse-item icon="icons:info" header="Item 2">
 *   Lots of very interesting content.
 * </paper-collapse-item>
 * <paper-collapse-item icon="icons:help" header="Item 3">
 *   Lots of very interesting content.
 * </paper-collapse-item>
 * ```
 * ### Styling
 *
 * The following custom properties and mixins are available for styling:
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * --paper-collapse-item-header|Mixin applied to header of collapsible item|{}
 * --paper-collapse-item-content|Mixin applied to collapsible content|{}
 * --paper-collapse-item-icon|Mixin applied to icon|{}
 * --paper-collapse-simple-paper-item-styles|Mixin applied to simple-paper-item|{}
 *
 * @customElement
 * @polymer
 * @demo demo/index.html
 */

/**
			 * Text in the header row
			 */

/**
			 * The name of the icon to use. The name should be of the
			 * form: iconset_name:icon_name.
			 */

/**
			 * If using paper-collapse-item without an iconset, you can set the
			 * src to be the URL of an individual icon image file. Note that
			 * this will take precedence over a given icon attribute.
			 */

/**
			 * True if the content section is opened
			 */

/**
	 * Fired whenever the status is changed (opened/closed)
	 *
	 * @event toggle
	 */
